[2022-11-29 03:11:26,053] CRITICAL - GPU detected
[2022-11-29 03:11:26,055] INFO - Getting video script.
[2022-11-29 03:11:26,065] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:26,065] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of unique and interesting keywords relating to theory of computer science programming concepts:\\n\\n-", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-29 03:11:26,065] DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2022-11-29 03:11:26,068] DEBUG - Starting new HTTPS connection (1): api.openai.com:443
[2022-11-29 03:11:28,593] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 485
[2022-11-29 03:11:28,593] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2089 request_id=bec29159d68206c8d328b5356cb61169 response_code=200
[2022-11-29 03:11:28,596] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:28,597] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of 5 interesting beginner topics on where abstract data types is used in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0.7, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-29 03:11:31,182] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 538
[2022-11-29 03:11:31,183] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2443 request_id=169568c16a6cffa1e3ecdd0af3193663 response_code=200
[2022-11-29 03:11:31,183] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:31,183] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a short, unique and interesting title relating to How is an abstract data type different from a data type? title without involving numbers:", "temperature": 1, "max_tokens": 20, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-29 03:11:32,034] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 317
[2022-11-29 03:11:32,034] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=707 request_id=1aba0ccdd95a51c90fb1884833ca6879 response_code=200
[2022-11-29 03:11:32,057] DEBUG - Keyword abstract data types, Topics ['What is an abstract data type?', 'How is an abstract data type different from a data type?', 'What are some examples of abstract data types?', 'What are some operations that can be performed on an abstract data type?', 'How can abstract data types be used in computer programming?'], Topic Comparing Abstract Data Types to Regular Data Types
[2022-11-29 03:11:32,057] INFO - topic Comparing Abstract Data Types to Regular Data Types
[2022-11-29 03:11:32,057] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:32,057] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of beginner topics relating to what is Comparing Abstract Data Types to Regular Data Types in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-29 03:11:34,965] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 608
[2022-11-29 03:11:34,965] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2761 request_id=3cd165abc90025ba3a4e1c79c9d7c3ef response_code=200
[2022-11-29 03:11:34,966] DEBUG - topic: Comparing Abstract Data Types to Regular Data Types, sub topics What is an abstract data type?
-What is a regular data type?
-What are the differences between abstract data types and regular data types?
-What are some examples of abstract data types?
-What are some examples of regular data types?
-How can abstract data types be used in programming?
-What are the benefits of using abstract data types?
[2022-11-29 03:11:34,966] INFO - subtopics ['What is an abstract data type?', 'What is a regular data type?', 'What are the differences between abstract data types and regular data types?', 'What are some examples of abstract data types?', 'What are some examples of regular data types?', 'How can abstract data types be used in programming?', 'What are the benefits of using abstract data types?']
[2022-11-29 03:11:34,966] DEBUG - getting summary for topic
[2022-11-29 03:11:34,966] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:34,966] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a summary for the following topic in the form of a youtube description in the context of theory of computer science programming concepts:\\n\\ntopic: Comparing Abstract Data Types to Regular Data Types\\n\\nsummary:", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-29 03:11:35,820] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 467
[2022-11-29 03:11:35,820] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=694 request_id=c4564a8a243720f6d617f421ee355495 response_code=200
[2022-11-29 03:11:35,821] INFO - summary In this video, we'll be discussing the differences between abstract data types (ADTs) and regular data types. We'll see that ADTs offer a number of advantages, including greater flexibility and readability.
[2022-11-29 03:11:35,821] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:35,821] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Comparing Abstract Data Types to Regular Data Types in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is an abstract data type?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n2.", "\\n\\n2.", "\\n\\n\\n2."], "echo": false}' message='Post details'
[2022-11-29 03:11:36,853] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 587
[2022-11-29 03:11:36,853] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=879 request_id=7da2e3682864da7c491aa1a5fb655506 response_code=200
[2022-11-29 03:11:36,853] DEBUG - passage length 324
[2022-11-29 03:11:36,853] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-29 03:11:36,853] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "An abstract data type is a class of data that doesn\'t actually have any concrete instances. For example, the Integer data type is an abstract data type because it doesn\'t actually have any concrete instances that represent the numbers zero to nine. Instead, Integer data instances represent the numbers in an arbitrary base.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-29 03:11:42,776] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 472
[2022-11-29 03:11:42,777] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=5779 request_id=caaecdfbb8e84795f66756e5026a0881 response_code=200
[2022-11-29 03:11:42,777] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:42,777] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Comparing Abstract Data Types to Regular Data Types in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is an abstract data type?\\n\\nAn abstract data type is a set of data that doesn\'t actually have any concrete instances.\\nFor example, the Integer data type is an abstract data type because it doesn\'t actually have any concrete instances that represent the numbers zero to nine.\\nInstead, Integer data instances represent the numbers in an arbitrary base.\\n\\n2. What is a regular data type?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n3.", "\\n\\n3.", "\\n\\n\\n3."], "echo": false}' message='Post details'
[2022-11-29 03:11:43,381] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 481
[2022-11-29 03:11:43,382] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=451 request_id=8466a39db0245656bebdc2f6f9ea373d response_code=200
[2022-11-29 03:11:43,382] DEBUG - passage length 216
[2022-11-29 03:11:43,382] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-29 03:11:43,382] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A regular data type is a data type that has specific, concrete instances. For example, the Integer data type is a regular data type because it has specific, concrete instances that represent the numbers zero to nine.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-29 03:11:53,954] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 1042
[2022-11-29 03:11:53,955] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=10429 request_id=89dc727ebb6bc7d47c14a87f66f82d91 response_code=200
[2022-11-29 03:11:53,955] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:11:53,955] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Comparing Abstract Data Types to Regular Data Types in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is an abstract data type?\\n\\nAn abstract data type is a set of data that doesn\'t actually have any concrete instances.\\nFor example, the Integer data type is an abstract data type because it doesn\'t actually have any concrete instances that represent the numbers zero to nine.\\nInstead, Integer data instances represent the numbers in an arbitrary base.\\n\\n2. What is a regular data type?\\n\\nA regular data type is a data type that has specific, concrete instances.\\nFor example, the Integer data type is a regular data type because it has specific, concrete instances that represent the numbers zero to nine.\\nNote that the number of instances of a data type and the size of these instances may vary.\\nFor example, in Visual Basic, the Integer data type can hold an integer number that is, at most, 2,147,483,647, but it cannot hold floating point numbers.\\nHowever, in the Pascal programming language, the Integer data type can hold both integer numbers and floating point numbers.\\nAdditionally, the byte data type can hold an integer number that is, at most, 255.\\nThe byte data type is not a regular data type, because it has only 256 instances (0, 1, 2, ..., 255).\\nThe Integer data type is a regular data type, because it has 2,147,483,648 instances (0, 1, 2, ..., 2,147,483,647).\\n\\n3. What are the differences between abstract data types and regular data types?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n4.", "\\n\\n4.", "\\n\\n\\n4."], "echo": false}' message='Post details'
[2022-11-29 03:11:55,261] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 854
[2022-11-29 03:11:55,262] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1156 request_id=d198b978351827e6300b6e974fedb881 response_code=200
[2022-11-29 03:11:55,262] DEBUG - passage length 577
[2022-11-29 03:11:55,262] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-29 03:11:55,262] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "Regular data types have specific, concrete instances.  Abstract data types do not have any specific, concrete instances.  Regular data types can hold a variety of data types, while abstract data types can only hold data types that are fundamental to computer science.  Abstract data types are useful for representing data that doesn\'t have a specific, concrete representation.  Regular data types are useful for creating algorithms that work with specific, concrete data types.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-29 03:12:52,601] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 6666
[2022-11-29 03:12:52,602] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=57196 request_id=e49a53ccf4de1620e55592de5610ce86 response_code=200
[2022-11-29 03:12:52,602] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-29 03:12:52,602] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Comparing Abstract Data Types to Regular Data Types in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is an abstract data type?\\n\\nAn abstract data type is a set of data that doesn\'t actually have any concrete instances.\\nFor example, the Integer data type is an abstract data type because it doesn\'t actually have any concrete instances that represent the numbers zero to nine.\\nInstead, Integer data instances represent the numbers in an arbitrary base.\\n\\n2. What is a regular data type?\\n\\nA regular data type is a data type that has specific, concrete instances.\\nFor example, the Integer data type is a regular data type because it has specific, concrete instances that represent the numbers zero to nine.\\nNote that the number of instances of a data type and the size of these instances may vary.\\nFor example, in Visual Basic, the Integer data type can hold an integer number that is, at most, 2,147,483,647, but it cannot hold floating point numbers.\\nHowever, in the Pascal programming language, the Integer data type can hold both integer numbers and floating point numbers.\\nAdditionally, the byte data type can hold an integer number that is, at most, 255.\\nThe byte data type is not a regular data type, because it has only 256 instances (0, 1, 2, ..., 255).\\nThe Integer data type is a regular data type, because it has 2,147,483,648 instances (0, 1, 2, ..., 2,147,483,647).\\n\\n3. What are the differences between abstract data types and regular data types?\\n\\nRegular data types have specific, concrete instances.  Abstract data types do not have any specific, concrete instances.  Regular data types can hold a variety of data types, while abstract data types can only hold data types that are fundamental to computer science.  Abstract data types are useful for representing data that doesn\'t have a specific, concrete representation.  Regular data types are useful for creating algorithms that work with specific, concrete data types. \\n\\n\\nA function is a mathematical relation between a set of inputs and a set of permissible outputs. The inputs to a function are called the arguments. The set of permissible output values is called the codomain, while the set of actually attained values is called the range. \\n\\n\\nA function can be expressed as a formula, in which case it is called a functional expression or simply a function. \\n\\n\\nA function can also be expressed as an algorithm, in which case it is called a function procedure or function subroutine. \\n\\n\\nA function can be expressed as a table that lists the arguments of the function and the values that the function assumes for these arguments. A function expressed in this form is also sometimes called a table function. \\n\\n\\nA function can be expressed as a graph. \\n\\n\\nA function can also be expressed as a set of ordered pairs, wherein the first component of each pair is an argument and the second component is the value that the function assumes for that argument. \\n\\n\\nA function has a domain, which is the set of all permissible inputs, a codomain, which is the set of all permissible outputs, and a range, which is the set of all actual outputs. \\n\\n\\nA function is a single-valued relation; that is, every element of the domain is related to exactly one element of the codomain. \\n\\n\\nA relation is a single-valued function if and only if it is possible to associate with every element of the domain exactly one element of the codomain. \\n\\n\\nA function is defined by a formula, a procedure, a graph, a table, or a set of ordered pairs. \\n\\n\\nA function is a special type of relation. \\n\\n\\nA relation is a special type of set. \\n\\n\\nA relation is a special type of list. \\n\\n\\nA relation is a set of ordered pairs. \\n\\n\\nA relation is a mathematical expression that assigns to each element of a set S of inputs exactly one element of a set T of outputs. \\n\\n\\nA relation is a special type of function. \\n\\n\\nA relation is a correspondence between two sets. \\n\\n\\nIf f is a function and x and y are elements of the domain of f, then f is said to be one-to-one if whenever f of x equals f of y, it must be the case that x and y are equal. \\n\\n\\nA function is said to be onto or surjective or a surjection if every element of the codomain of the function is the value of the function at some argument. \\n\\n\\nIf f is a function and x and y are elements of the domain of f, then f is said to be onto or surjective or a surjection if for every element y of the codomain of f, there exists an x in the domain of f such that f of x equals y. \\n\\n\\nA function f is onto or surjective or a surjection if and only if for every element y in the codomain of f, there exists an x in the domain of f such that f of x equals y. \\n\\n\\nIf f is a function and x and y are elements of the domain of f, then f is said to be one-to-one if for every pair x and y of elements of the domain of f, the following are equivalent: \\n\\n\\ni) f of x equals f of y. \\n\\n\\nii) x equals y. \\n\\n\\nA function is said to be one-to-one if whenever f of x equals f of y, it must be the case that x equals y. \\n\\n\\nA function is said to be one-to-one if and only if whenever f of x equals f of y, it must be the case that x equals y. \\n\\n\\nA function is said to be onto or surjective or a surjection if every element of the codomain of the function is the value of the function at some argument. \\n\\n\\nAn algorithm can be expressed as a function. \\n\\n\\nA function can be expressed as a table that lists the arguments of the function and the values that the function assumes for these arguments. \\n\\n\\nA function is said to be one-to-one if whenever f of x equals f of y, it must be the case that x equals y. \\n\\n\\nA function is said to be onto or surjective or a surjection if for every element y of the codomain of f, there exists an x in the domain of f such that f of x equals y. \\n\\n\\nA function is said to be onto or surjective or a surjection if and only if for every element y in the codomain of f, there exists an x in the domain of f such that f of x equals y. \\n\\n\\nA function is said to be onto or surjective or a surjection if every element of the codomain of the function is the value of the function at some argument. \\n\\n\\nA function is said to be one-to-one if and only if whenever f of x equals f of y, it must be the case that x equals y. \\n\\n\\nA function is said to be onto or surjective or a surjection if and only if for every element y in the codomain of f, there exists an x in the domain of f such that f of x equals y. \\n\\n\\nA function is said to be one-to-one if and only if for every pair x and y of elements of the domain of f, the following are equivalent: \\n\\ni) f of x equals f of y. \\n\\nii) x equals y. \\n\\n\\nA function can also be expressed as a graph. \\n\\n\\nA function is said to be onto or surjective or a surjection if every element of the codomain of the function is the value of the function at some argument. \\n\\n\\nA function is said to be one-to-one if and only if whenever f of x equals f of y, it must be the case that x equals y. \\n\\n\\nA function is said to be onto or surjective or a surjection if and only if for every element y in the codomain of f, there exists an x in the domain of f such that f of x equals y. \\n\\n\\nA function is said to be one-to-one if and only if for every pair x and y of elements of the domain of f, the following are equivalent: \\n\\n\\ni) f of x equals f of y. \\n\\n\\nii) x equals y. \\n\\n\\nA function is said to be onto or surjective or a surjection if and only if for every element y in the codomain of f, there exists an x in the domain of f such that f of x equals y. \\n\\n\\nA function is said to be one-to-one if and only if for every pair x and y of elements of the domain of f, the following are equivalent: \\n\\n\\ni) f of x equals f of y. \\n\\n\\nii) x equals y. \\n\\n\\nA function can be expressed as a table that lists the arguments of the function and the values that the function assumes for these arguments. \\n\\n\\nA function can also be expressed as a graph.\\n\\n4. What are some examples of abstract data types?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n5.", "\\n\\n5.", "\\n\\n\\n5."], "echo": false}' message='Post details'
[2022-11-29 03:12:52,763] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 400 294
[2022-11-29 03:12:52,763] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=9 request_id=78b2c4094bbacf2ebd2dc1eb2df15c76 response_code=400
[2022-11-29 03:12:52,763] INFO - error_code=None error_message="This model's maximum context length is 2049 tokens, however you requested 2131 tokens (2003 in your prompt; 128 for the completion). Please reduce your prompt; or completion length." error_param=None error_type=invalid_request_error message='OpenAI API error received' stream_error=False
