[2022-11-20 02:06:41,793] CRITICAL - GPU detected
[2022-11-20 02:06:41,795] INFO - Getting video script.
[2022-11-20 02:06:41,804] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:06:41,804] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of unique and interesting keywords relating to basic theory of computer science:\\n\\n-", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-20 02:06:41,805] DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2022-11-20 02:06:41,807] DEBUG - Starting new HTTPS connection (1): api.openai.com:443
[2022-11-20 02:06:44,308] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 423
[2022-11-20 02:06:44,308] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2052 request_id=da832da7990c034d86dd30ef4961637a response_code=200
[2022-11-20 02:06:44,311] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:06:44,311] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a list of 5 interesting beginner topics on where efficiency is used in the context of theory of computer science:\\n-", "temperature": 0.7, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-20 02:06:44,707] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 361
[2022-11-20 02:06:44,707] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=231 request_id=6d9f26fd8cdac3219decc908b489e1d1 response_code=200
[2022-11-20 02:06:44,707] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:06:44,707] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a short, unique and interesting title relating to the theory of Data structures in the form of a video essay title without involving numbers:", "temperature": 1, "max_tokens": 20, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-20 02:06:45,854] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 311
[2022-11-20 02:06:45,854] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=996 request_id=8acbf08dc1393e6c9dff465144c11852 response_code=200
[2022-11-20 02:06:45,858] DEBUG - Keyword efficiency, Topics ['Data structures', 'Computer algorithms', 'Computer architecture', 'Computer software', 'Computer security'], Topic Theory behind Data structures: An exploration
[2022-11-20 02:06:45,858] INFO - topic Theory behind Data structures: An exploration
[2022-11-20 02:06:45,858] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:06:45,859] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of beginner topics relating to what is Theory behind Data structures: An exploration in the context of theory of computer science:\\n\\n", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-20 02:06:49,965] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 679
[2022-11-20 02:06:49,965] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=3951 request_id=338c794ec6d79cb234eb154f36e4bee7 response_code=200
[2022-11-20 02:06:49,966] DEBUG - topic: Theory behind Data structures: An exploration, sub topics 

-What is a data structure?
-What are the most common data structures?
-What is the difference between a data structure and an algorithm?
-What is the time complexity of a data structure?
-What is the space complexity of a data structure?
-What are the tradeoffs between time and space complexity?
-What is the worst case scenario for a data structure?
-What is the best case scenario for a data structure?
[2022-11-20 02:06:49,966] INFO - subtopics ['What is a data structure?', 'What are the most common data structures?', 'What is the difference between a data structure and an algorithm?', 'What is the time complexity of a data structure?', 'What is the space complexity of a data structure?', 'What are the tradeoffs between time and space complexity?', 'What is the worst case scenario for a data structure?', 'What is the best case scenario for a data structure?']
[2022-11-20 02:06:49,966] DEBUG - getting summary for topic
[2022-11-20 02:06:49,966] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:06:49,966] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a summary for the following topic in the form of a youtube description in the context of theory of computer science:\\n\\ntopic: Theory behind Data structures: An exploration\\n\\nsummary:", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-20 02:06:50,621] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 466
[2022-11-20 02:06:50,622] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=503 request_id=f21d2647acd3810b11b075ddacd82aad response_code=200
[2022-11-20 02:06:50,622] INFO - summary In this video, we explore the theory behind data structures. We discuss how data structures can be used to organize and store data, and how they can be used to improve the performance of a computer system.
[2022-11-20 02:06:50,622] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:06:50,622] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n2.", "\\n\\n2.", "\\n\\n\\n2."], "echo": false}' message='Post details'
[2022-11-20 02:06:52,007] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 787
[2022-11-20 02:06:52,008] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1235 request_id=9aac117d07c16a1a3227171826d2130d response_code=200
[2022-11-20 02:06:52,008] DEBUG - passage length 517
[2022-11-20 02:06:52,008] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:06:52,008] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile, and when you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:06:58,418] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 772
[2022-11-20 02:06:58,419] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=6266 request_id=44134eabcc76746d8f6850068d46495d response_code=200
[2022-11-20 02:06:58,419] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:06:58,419] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\nA data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne way to think about a stack is that it is a list of things that you can only add to or remove from the top.\\n\\n2. What are the most common data structures?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n3.", "\\n\\n3.", "\\n\\n\\n3."], "echo": false}' message='Post details'
[2022-11-20 02:06:58,979] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 336
[2022-11-20 02:06:58,980] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=408 request_id=af399123ea27dcd017eda3331cdea3ea response_code=200
[2022-11-20 02:06:58,980] DEBUG - passage length 70
[2022-11-20 02:06:58,980] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:06:58,980] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The most common data structures are the list, the stack, and the tree.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:07:00,042] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 216
[2022-11-20 02:07:00,043] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=917 request_id=85b33ea25383dfccddec058c98140c43 response_code=200
[2022-11-20 02:07:00,043] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:07:00,043] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\nA data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne way to think about a stack is that it is a list of things that you can only add to or remove from the top.\\n\\n2. What are the most common data structures?\\n\\nThe most common data structures are the list, the stack, and the tree.\\n\\n3. What is the difference between a data structure and an algorithm?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n4.", "\\n\\n4.", "\\n\\n\\n4."], "echo": false}' message='Post details'
[2022-11-20 02:07:00,743] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 509
[2022-11-20 02:07:00,743] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=547 request_id=934e8578cf7034d28646c0f493514d66 response_code=200
[2022-11-20 02:07:00,744] DEBUG - passage length 243
[2022-11-20 02:07:00,744] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:07:00,744] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A data structure is a way to organize information in a computer. An algorithm is a set of instructions that tell the computer how to do something. For example, the algorithm for adding two numbers is: add the first number to the second number.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:07:03,282] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 391
[2022-11-20 02:07:03,283] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2398 request_id=67985ae8cad7f0eddbbf370e898b6c30 response_code=200
[2022-11-20 02:07:03,283] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:07:03,283] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\nA data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne way to think about a stack is that it is a list of things that you can only add to or remove from the top.\\n\\n2. What are the most common data structures?\\n\\nThe most common data structures are the list, the stack, and the tree.\\n\\n3. What is the difference between a data structure and an algorithm?\\n\\nA data structure is a way to organize information in a computer. An algorithm is a set of instructions that tell the computer how to do something. For example, the algorithm for adding two numbers is: add the first number to the second number.\\n\\n4. What is the time complexity of a data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n5.", "\\n\\n5.", "\\n\\n\\n5."], "echo": false}' message='Post details'
[2022-11-20 02:07:04,070] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 530
[2022-11-20 02:07:04,070] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=629 request_id=91f412345629fcc0d61705446777feb9 response_code=200
[2022-11-20 02:07:04,070] DEBUG - passage length 264
[2022-11-20 02:07:04,070] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:07:04,071] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The time complexity of a data structure is the number of operations it takes to build the data structure. For example, the time complexity of a stack is two operations: push and pop. The time complexity of a tree is O(n) where n is the number of nodes in the tree.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:07:06,923] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 412
[2022-11-20 02:07:06,923] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2709 request_id=b63fe7338f18eb0dea8169c5a3a25f0a response_code=200
[2022-11-20 02:07:06,924] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:07:06,924] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\nA data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne way to think about a stack is that it is a list of things that you can only add to or remove from the top.\\n\\n2. What are the most common data structures?\\n\\nThe most common data structures are the list, the stack, and the tree.\\n\\n3. What is the difference between a data structure and an algorithm?\\n\\nA data structure is a way to organize information in a computer. An algorithm is a set of instructions that tell the computer how to do something. For example, the algorithm for adding two numbers is: add the first number to the second number.\\n\\n4. What is the time complexity of a data structure?\\n\\nThe time complexity of a data structure is the number of operations it takes to build the data structure. For example, the time complexity of a stack is two operations: push and pop. The time complexity of a tree is O(n) where n is the number of nodes in the tree.\\n\\n5. What is the space complexity of a data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n6.", "\\n\\n6.", "\\n\\n\\n6."], "echo": false}' message='Post details'
[2022-11-20 02:07:07,694] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 509
[2022-11-20 02:07:07,694] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=597 request_id=4c16ed218fd0b0f63e804f0ee29e5e52 response_code=200
[2022-11-20 02:07:07,694] DEBUG - passage length 243
[2022-11-20 02:07:07,695] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:07:07,695] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The space complexity of a data structure is the number of bytes it takes to store the data structure. For example, the space complexity of a stack is two bytes. The space complexity of a tree is O(n) where n is the number of nodes in the tree.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:07:10,368] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 392
[2022-11-20 02:07:10,368] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2531 request_id=8f1bedcb8411bf55b5cf3fd3f086037d response_code=200
[2022-11-20 02:07:10,369] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:07:10,369] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\nA data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne way to think about a stack is that it is a list of things that you can only add to or remove from the top.\\n\\n2. What are the most common data structures?\\n\\nThe most common data structures are the list, the stack, and the tree.\\n\\n3. What is the difference between a data structure and an algorithm?\\n\\nA data structure is a way to organize information in a computer. An algorithm is a set of instructions that tell the computer how to do something. For example, the algorithm for adding two numbers is: add the first number to the second number.\\n\\n4. What is the time complexity of a data structure?\\n\\nThe time complexity of a data structure is the number of operations it takes to build the data structure. For example, the time complexity of a stack is two operations: push and pop. The time complexity of a tree is O(n) where n is the number of nodes in the tree.\\n\\n5. What is the space complexity of a data structure?\\n\\nThe space complexity of a data structure is the number of bytes it takes to store the data structure. For example, the space complexity of a stack is two bytes. The space complexity of a tree is O of n where n is the number of nodes in the tree.\\n\\n6. What are the tradeoffs between time and space complexity?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n7.", "\\n\\n7.", "\\n\\n\\n7."], "echo": false}' message='Post details'
[2022-11-20 02:07:11,322] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 562
[2022-11-20 02:07:11,322] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=779 request_id=58a6675ccc0debe10d738a956ae65eb1 response_code=200
[2022-11-20 02:07:11,323] DEBUG - passage length 296
[2022-11-20 02:07:11,323] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:07:11,323] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "One tradeoff between time and space complexity is that the space complexity of a data structure is usually higher than the time complexity. For example, a stack is two bytes, but it takes two operations to build it (push and pop). A tree is O of n bytes, but it takes O(n) operations to build it.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:07:14,830] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 445
[2022-11-20 02:07:14,830] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=3336 request_id=f3d5586cbc0fb521345ee082ec9f68c2 response_code=200
[2022-11-20 02:07:14,831] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:07:14,831] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\nA data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne way to think about a stack is that it is a list of things that you can only add to or remove from the top.\\n\\n2. What are the most common data structures?\\n\\nThe most common data structures are the list, the stack, and the tree.\\n\\n3. What is the difference between a data structure and an algorithm?\\n\\nA data structure is a way to organize information in a computer. An algorithm is a set of instructions that tell the computer how to do something. For example, the algorithm for adding two numbers is: add the first number to the second number.\\n\\n4. What is the time complexity of a data structure?\\n\\nThe time complexity of a data structure is the number of operations it takes to build the data structure. For example, the time complexity of a stack is two operations: push and pop. The time complexity of a tree is O(n) where n is the number of nodes in the tree.\\n\\n5. What is the space complexity of a data structure?\\n\\nThe space complexity of a data structure is the number of bytes it takes to store the data structure. For example, the space complexity of a stack is two bytes. The space complexity of a tree is O of n where n is the number of nodes in the tree.\\n\\n6. What are the tradeoffs between time and space complexity?\\n\\nOne tradeoff between time and space complexity is that the space complexity of a data structure is usually higher than the time complexity. For example, a stack is two bytes, but it takes two operations to build it (push and pop). A tree is O of n bytes, but it takes O of n operations to build it.\\n\\n7. What is the worst case scenario for a data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n8.", "\\n\\n8.", "\\n\\n\\n8."], "echo": false}' message='Post details'
[2022-11-20 02:07:15,441] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
[2022-11-20 02:07:15,442] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=460 request_id=1ef78d9338e8dbdf92bc9680577be301 response_code=200
[2022-11-20 02:07:15,442] DEBUG - passage length 168
[2022-11-20 02:07:15,442] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:07:15,442] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The worst case scenario for a data structure is when it takes the longest time to build the data structure, or when it takes the most space to store the data structure.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:07:17,293] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 298
[2022-11-20 02:07:17,294] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=1708 request_id=b1b51bdebeaaa7afed61c435913cdfcc response_code=200
[2022-11-20 02:07:17,294] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:07:17,294] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Theory behind Data structures An exploration in the context of theory of computer science summarised for a 9th grader:\\n\\n1. What is a data structure?\\n\\nA data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.\\n\\nOne common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.\\n\\nOne way to think about a stack is that it is a list of things that you can only add to or remove from the top.\\n\\n2. What are the most common data structures?\\n\\nThe most common data structures are the list, the stack, and the tree.\\n\\n3. What is the difference between a data structure and an algorithm?\\n\\nA data structure is a way to organize information in a computer. An algorithm is a set of instructions that tell the computer how to do something. For example, the algorithm for adding two numbers is: add the first number to the second number.\\n\\n4. What is the time complexity of a data structure?\\n\\nThe time complexity of a data structure is the number of operations it takes to build the data structure. For example, the time complexity of a stack is two operations: push and pop. The time complexity of a tree is O(n) where n is the number of nodes in the tree.\\n\\n5. What is the space complexity of a data structure?\\n\\nThe space complexity of a data structure is the number of bytes it takes to store the data structure. For example, the space complexity of a stack is two bytes. The space complexity of a tree is O of n where n is the number of nodes in the tree.\\n\\n6. What are the tradeoffs between time and space complexity?\\n\\nOne tradeoff between time and space complexity is that the space complexity of a data structure is usually higher than the time complexity. For example, a stack is two bytes, but it takes two operations to build it (push and pop). A tree is O of n bytes, but it takes O of n operations to build it.\\n\\n7. What is the worst case scenario for a data structure?\\n\\nThe worst case scenario for a data structure is when it takes the longest time to build the data structure, or when it takes the most space to store it.\\n\\n8. What is the best case scenario for a data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n9.", "\\n\\n9.", "\\n\\n\\n9."], "echo": false}' message='Post details'
[2022-11-20 02:07:17,901] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 416
[2022-11-20 02:07:17,902] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=456 request_id=a272dec48b06a5d3278819f1e3a1860e response_code=200
[2022-11-20 02:07:17,902] DEBUG - passage length 150
[2022-11-20 02:07:17,902] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-20 02:07:17,902] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The best case scenario for a data structure is when it takes the least time to build the data structure, or when it takes the least space to store it.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0, "top_p": 1}' message='Post details'
[2022-11-20 02:07:20,620] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 297
[2022-11-20 02:07:20,620] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2572 request_id=7645dab0a4db7c1a6efb0de0584c3e20 response_code=200
[2022-11-20 02:07:20,621] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:20,789] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/playlists?part=id&id=UC_x5XG1OV2P6uZZ5FSM9Ttw&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&maxResults=2 HTTP/1.1" 200 None
[2022-11-20 02:07:20,792] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,395] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/search?part=snippet&type=video&maxResults=50&order=relevance&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&q=What%20is%20a%20data%20structure?%20in%20theory%20of%20computer%20science&publishedAfter=2000-01-01T00:00:00Z&publishedBefore=3000-01-01T00:00:00Z HTTP/1.1" 200 None
[2022-11-20 02:07:21,399] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,465] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=zg9ih6SVACc HTTP/1.1" 200 None
[2022-11-20 02:07:21,467] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,534] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=LFKZLXVO-Dg HTTP/1.1" 200 None
[2022-11-20 02:07:21,537] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,604] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=xLetJpcjHS0 HTTP/1.1" 200 None
[2022-11-20 02:07:21,606] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,665] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=8hly31xKli0 HTTP/1.1" 200 None
[2022-11-20 02:07:21,668] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,730] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=5_5oE5lgrhw HTTP/1.1" 200 None
[2022-11-20 02:07:21,733] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,791] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=RBSGKlAvoiM HTTP/1.1" 200 None
[2022-11-20 02:07:21,793] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,845] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=gXgEDyodOJU HTTP/1.1" 200 None
[2022-11-20 02:07:21,847] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,900] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=rL8X2mlNHPM HTTP/1.1" 200 None
[2022-11-20 02:07:21,902] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:21,968] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=T9DSBhBR_I4 HTTP/1.1" 200 None
[2022-11-20 02:07:21,971] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,031] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=-uleG_Vecis HTTP/1.1" 200 None
[2022-11-20 02:07:22,033] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,090] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=2T-A_GFuoTo HTTP/1.1" 200 None
[2022-11-20 02:07:22,092] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,147] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=n0e27Cpc88E HTTP/1.1" 200 None
[2022-11-20 02:07:22,150] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,218] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=2mhyHQaZ2dw HTTP/1.1" 200 None
[2022-11-20 02:07:22,220] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,288] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=88fsIA53sWE HTTP/1.1" 200 None
[2022-11-20 02:07:22,291] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,341] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ZniDyolzrBw HTTP/1.1" 200 None
[2022-11-20 02:07:22,344] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,404] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=gI-qXk7XojA HTTP/1.1" 200 None
[2022-11-20 02:07:22,407] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,457] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=R9PTBwOzceo HTTP/1.1" 200 None
[2022-11-20 02:07:22,458] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,507] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=AgyTHzjBS-c HTTP/1.1" 200 None
[2022-11-20 02:07:22,509] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,572] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=X9r-J_-soUo HTTP/1.1" 200 None
[2022-11-20 02:07:22,576] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,629] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=9bsK03SlmNM HTTP/1.1" 200 None
[2022-11-20 02:07:22,631] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,679] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=9C2cpQZVRBA HTTP/1.1" 200 None
[2022-11-20 02:07:22,681] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,745] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=STL8ESuETmM HTTP/1.1" 200 None
[2022-11-20 02:07:22,748] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,800] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=FWiPeySFTqI HTTP/1.1" 200 None
[2022-11-20 02:07:22,802] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,877] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=eSYeHlwDCNA HTTP/1.1" 200 None
[2022-11-20 02:07:22,879] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-20 02:07:22,931] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=f_IaKCB7Zo8 HTTP/1.1" 200 None
[2022-11-20 02:07:22,933] DEBUG - Hashtags ['#datastructuresbyneso', '#datastructures', '#datastructuresbyneso', '#datastructures', '#datastructuretypes', '#compsci', '#programming', '#tech', '#abstractdatatypes', '#adt', '#datastructures', '#dsa', '#datastructurestutorials', '#dsatutorials', '#datastructuresbyneso', '#datastructures', '#abstractdatatypes', '#datastructuresbyneso', '#datastructures', '#linkedlist', '#singlelinkedlist', '#knowledgegate', '#gate', '#sanchitjain', '#recursionpython', '#recursion', '#datastructure', '#pythonrecursiontutorial', '#recursionproblems', '#pythonrecursion', '#recursioninpython', '#recursivefunctionpython', '#recursiontutorial', '#datastructuresbyneso', '#datastructures', '#asymptoticanalysis']
[2022-11-20 02:07:22,933] DEBUG - Top Hashtags ['#datastructures', '#datastructuresbyneso', '#abstractdatatypes', '#datastructuretypes', '#compsci']
[2022-11-20 02:07:22,933] DEBUG - Tags ['data structures', 'python', 'computer science', 'tutorial', 'course', 'for beginners', 'big o', 'graph theory', 'graph theory intro', 'graph theory introduction', 'graph theory terminology', 'graph theory definition', 'graphs computer science', 'graph theory computer science', 'graph theory guide', 'graph theory beginners', 'data structures', 'data structures using c', 'data structures using c language', 'data structures by neso academy', 'data structures basics', 'data', 'structures', 'data vs information', 'data structures by neso', 'data structures and algorithms', 'data structures tutorial', 'algorithms tutorial', 'linked lists', 'arrays', 'hash maps', 'hash tables', 'java', 'data structures course', 'data structues', 'java data structures', 'programming', 'programmer', 'whiteboard interview', 'cracking the coding interview', 'java algorithms', 'google engineer', 'graph', 'data structure (literature subject)', 'computer', 'coding', 'programming', 'algorithm', 'yt:cc=on', 'interview', 'computer science', 'john green', 'hank green', 'vlogbrothers', 'crash course', 'crashcourse', 'education', 'game of thrones', 'google maps', 'computer science', 'algorithms', 'algorithm', 'sorting', 'array', 'sort', 'programming', 'software', 'computation', 'selection sort', 'big o', 'graph search', 'edsger dijkstra', 'muḥammad ibn mūsā al-khwārizmī', 'data structures types', 'types of data structures', 'static data structures', 'dynamic data structures', 'linear data structures', 'nonlinear data structures', 'data structures', 'webdev', 'app development', 'lesson', 'tutorial', 'cs50', 'harvard', 'computer', 'science', 'david', 'j.', 'malan', 'adt in datastructures', 'adt', 'abstract data types', 'abstract datatypes', 'abstract data type in data structure', 'adt in data structure with example', 'adt data structure', 'data structure adt', 'data structures and algorithms', 'adts', 'microsoft research', 'algorithms', 'computer', 'education', 'graph in data structure and algorithm', 'what is graph in data structure', 'graph in data structure', 'types of graphs math', 'force directed graph', 'graph representation in data structure', 'graph theory', 'property graph', 'graph edge', 'graph algorithms tutorial', 'application of graph in data structure', 'application of graph theory in computer science ppt', 'graph maker', 'create a graph', 'line graph', 'cefl', 'online data structures and algorithms course', 'data types', 'abstract data types', 'use of abstract data types', 'data types vs abstract data types', 'abstract data types in data structures', 'abstract data type means', 'data structures', 'data structures lectures', 'data structures basics', 'john green', 'hank green', 'vlogbrothers', 'crash course', 'crashcourse', 'education', 'binary', 'logic', 'logic gates', 'and', 'not', 'or', 'circuits', 'computers', 'computer science', 'computation', 'computing', 'comp sci', 'boolean algebra', 'operations', 'true', 'false', 'logic table', 'linked list', 'link list', 'linked lists', 'linked list in data structures', 'data structures linked lists', 'single linked list', 'single linked list representation', 'representation of single linked list', 'linked list in c', 'singly linked list', 'singly linked list in data structure', 'linked list lectures', 'c++', 'c++ coding', 'c++ full course', 'c++ placement course', 'how to code', 'programming', 'college placement course', 'c++ language', 'java', 'java language', 'java full course', 'java placement', 'java code', 'java coding', 'data structure syllabus for gate', 'data structure syllabus for placement', 'data structure syllabus in hindi', 'data structure marks distribution in hindi', 'data structures and algorithms lectures in hindi', 'data structures and algorithms tutorial', 'data structures in hindi', 'gate 2022', 'data structures tutorial', 'data structure blueprint', 'how to study data structures', 'what is asked in data structures', 'important topics in data structures', 'what to study in data structure', 'recursion python', 'recursion in data structure', 'simple explanation of recursion', 'data structures and algorithms recursion', 'python recursion tutorial', 'python recursion problems', 'python recursion', 'recursion in python', 'recursion in python example', 'recursive function in python', 'recursive function python', 'recursion algorithm', 'recursion data structure', 'what is recursion in python', 'python recursive function', 'recursive function with python code', 'recursive problems and algorithms', 'graph', 'data structure', 'algorithm', 'coding', 'programming', 'graph theory (field of study)', 'computer', 'yt:cc=on', 'big think', 'bigthink', 'bigthink.com', 'education', 'educational', 'lifelong learning', 'edu', 'physics', 'science', 'space', 'universe', 'consciousness', 'virtual reality', 'programming', 'donald hoffman', 'nick bostrum', 'simulation thoery', 'philosophy', 'the matrix', 'reality', 'evolution', 'cognitive science', 'donald hoffman consciousness', 'simulation theory', 'simulation theory explained', 'donald hoffman big think', 'donald hoffman and sam harris', 'donald hoffman interview', 'simulation theory reaction', 'simulation theory 2019 elon musk', 'video help', 'video how to', 'video tutorial', 'computer science sequences', 'computer science selections', 'computer science loops', 'computer loops', 'computer selections', 'computer sequences', 'sequences', 'loops', 'selections', 'code', 'computer code', 'programming structures', 'algorithms', 'data structures', 'asymptotic analysis', 'asymptotic analysis in data structures', 'comparing two data structures', 'comparing data structures', 'array vs linked list', 'linked lists vs arrays', 'time complexity', 'data structures for gate', 'gate data structures']
[2022-11-20 02:07:22,937] DEBUG - Top Tags ['programming', 'data structures', 'computer science', 'computer', 'education', 'algorithm', 'algorithms', 'tutorial', 'big o', 'graph theory', 'data structures basics', 'data structures and algorithms', 'data structures tutorial', 'linked lists', 'java']
[2022-11-20 02:07:35,363] DEBUG - processing 31 tts sections
[2022-11-20 02:07:35,364] DEBUG - Text-to-speech: What is a data structure?
[2022-11-20 02:07:35,364] DEBUG - [#1] Subsection: What is a data structure?
[2022-11-20 02:07:54,567] DEBUG - Text-to-speech: A data structure is a way to organize information in a computer. There are a lot of different data structures, and each one is good for a different purpose.

One common data structure is the stack. A stack is a way to keep a list of things in memory. You can think of it kind of like a pile of books. When you want to take a book off the top of the pile, you need to push it down the back side of the pile. When you want to add a book to the top of the pile, you need to push it up the back side of the pile.

One way to think about a stack is that it is a list of things that you can only add to or remove from the top.
[2022-11-20 02:07:54,567] DEBUG - [#1] Subsection: A data structure is a way to organize information in a computer.
[2022-11-20 02:08:15,882] DEBUG - [#2] Subsection: There are a lot of different data structures, and each one is good for a different purpose.
[2022-11-20 02:08:41,814] DEBUG - [#3] Subsection: One common data structure is the stack.
[2022-11-20 02:08:58,921] DEBUG - [#4] Subsection: A stack is a way to keep a list of things in memory.
[2022-11-20 02:09:17,828] DEBUG - [#5] Subsection: You can think of it kind of like a pile of books.
[2022-11-20 02:09:36,453] DEBUG - [#6] Subsection: When you want to take a book off the top of the pile, you need to push it down the back side of the pile.
[2022-11-20 02:10:03,857] DEBUG - [#7] Subsection: When you want to add a book to the top of the pile, you need to push it up the back side of the pile.
[2022-11-20 02:10:31,039] DEBUG - [#8] Subsection: One way to think about a stack is that it is a list of things that you can only add to or remove from the top.
[2022-11-20 02:11:01,704] DEBUG - Text-to-speech: What are the most common data structures?
[2022-11-20 02:11:01,704] DEBUG - [#1] Subsection: What are the most common data structures?
[2022-11-20 02:11:17,327] DEBUG - Text-to-speech: The most common data structures are the list, the stack, and the tree.
[2022-11-20 02:11:17,327] DEBUG - [#1] Subsection: The most common data structures are the list, the stack, and the tree.
[2022-11-20 02:11:40,712] DEBUG - Text-to-speech: What is the difference between a data structure and an algorithm?
[2022-11-20 02:11:40,712] DEBUG - [#1] Subsection: What is the difference between a data structure and an algorithm?
[2022-11-20 02:12:00,778] DEBUG - Text-to-speech: A data structure is a way to organize information in a computer. An algorithm is a set of instructions that tell the computer how to do something. For example, the algorithm for adding two numbers is: add the first number to the second number.
[2022-11-20 02:12:00,778] DEBUG - [#1] Subsection: A data structure is a way to organize information in a computer.
[2022-11-20 02:12:21,580] DEBUG - [#2] Subsection: An algorithm is a set of instructions that tell the computer how to do something.
[2022-11-20 02:12:44,851] DEBUG - [#3] Subsection: For example, the algorithm for adding two numbers is: add the first number to the second number.
[2022-11-20 02:13:13,831] DEBUG - Text-to-speech: What is the time complexity of a data structure?
[2022-11-20 02:13:13,831] DEBUG - [#1] Subsection: What is the time complexity of a data structure?
[2022-11-20 02:13:32,771] DEBUG - Text-to-speech: The time complexity of a data structure is the number of operations it takes to build the data structure. For example, the time complexity of a stack is two operations: push and pop. The time complexity of a tree is O(n) where n is the number of nodes in the tree.
[2022-11-20 02:13:32,771] DEBUG - [#1] Subsection: The time complexity of a data structure is the number of operations it takes to build the data structure.
[2022-11-20 02:14:01,129] DEBUG - [#2] Subsection: For example, the time complexity of a stack is two operations: push and pop.
[2022-11-20 02:14:28,708] DEBUG - [#3] Subsection: The time complexity of a tree is O(n) where n is the number of nodes in the tree.
[2022-11-20 02:14:59,978] DEBUG - Text-to-speech: What is the space complexity of a data structure?
[2022-11-20 02:14:59,978] DEBUG - [#1] Subsection: What is the space complexity of a data structure?
[2022-11-20 02:15:17,603] DEBUG - Text-to-speech: The space complexity of a data structure is the number of bytes it takes to store the data structure. For example, the space complexity of a stack is two bytes. The space complexity of a tree is O of n where n is the number of nodes in the tree.
[2022-11-20 02:15:17,604] DEBUG - [#1] Subsection: The space complexity of a data structure is the number of bytes it takes to store the data structure.
[2022-11-20 02:15:45,255] DEBUG - [#2] Subsection: For example, the space complexity of a stack is two bytes.
[2022-11-20 02:16:07,117] DEBUG - [#3] Subsection: The space complexity of a tree is O of n where n is the number of nodes in the tree.
[2022-11-20 02:16:37,254] DEBUG - Text-to-speech: What are the tradeoffs between time and space complexity?
[2022-11-20 02:16:37,255] DEBUG - [#1] Subsection: What are the tradeoffs between time and space complexity?
[2022-11-20 02:16:56,323] DEBUG - Text-to-speech: One tradeoff between time and space complexity is that the space complexity of a data structure is usually higher than the time complexity. For example, a stack is two bytes, but it takes two operations to build it (push and pop). A tree is O of n bytes, but it takes O of n operations to build it.
[2022-11-20 02:16:56,323] DEBUG - [#1] Subsection: One tradeoff between time and space complexity is that the space complexity of a data structure is usually higher than the time complexity.
[2022-11-20 02:17:31,285] DEBUG - [#2] Subsection: For example, a stack is two bytes, but it takes two operations to build it (push and pop).
[2022-11-20 02:18:01,583] DEBUG - [#3] Subsection: A tree is O of n bytes, but it takes O of n operations to build it.
[2022-11-20 02:18:28,224] DEBUG - Text-to-speech: What is the worst case scenario for a data structure?
[2022-11-20 02:18:28,224] DEBUG - [#1] Subsection: What is the worst case scenario for a data structure?
[2022-11-20 02:18:46,974] DEBUG - Text-to-speech: The worst case scenario for a data structure is when it takes the longest time to build the data structure, or when it takes the most space to store it.
[2022-11-20 02:18:46,974] DEBUG - [#1] Subsection: The worst case scenario for a data structure is when it takes the longest time to build the data structure, or when it takes the most space to store it.
[2022-11-20 02:19:22,902] DEBUG - Text-to-speech: What is the best case scenario for a data structure?
[2022-11-20 02:19:22,902] DEBUG - [#1] Subsection: What is the best case scenario for a data structure?
[2022-11-20 02:19:41,023] DEBUG - Text-to-speech: The best case scenario for a data structure is when it takes the least time to build the data structure, or when it takes the least space to store it.
[2022-11-20 02:19:41,023] DEBUG - [#1] Subsection: The best case scenario for a data structure is when it takes the least time to build the data structure, or when it takes the least space to store it.
[2022-11-20 02:20:15,665] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-20 02:20:15,665] DEBUG - api_version=None data='{"model": "text-babbage-001", "prompt": "Extract keywords from the following sentences:\\n\\nTheory behind Data structures: An exploration\\n\\nkeywords:", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-20 02:20:15,666] DEBUG - Resetting dropped connection: api.openai.com
[2022-11-20 02:20:16,107] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 298
[2022-11-20 02:20:16,108] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=69 request_id=579596276cb6e46b399cbc1e4fa177b2 response_code=200
[2022-11-20 02:20:16,108] DEBUG - Getting requests for icons
[2022-11-20 02:20:16,109] DEBUG - Starting new HTTPS connection (1): www.flaticon.com:443
[2022-11-20 02:20:16,219] DEBUG - https://www.flaticon.com:443 "GET /search?word=data%20structures&color=color&shape=outline&order_by=4 HTTP/1.1" 200 None
[2022-11-20 02:20:16,390] DEBUG - https://cdn-icons-png.flaticon.com/256/7569/7569601.png
[2022-11-20 02:20:16,391] DEBUG - Starting new HTTPS connection (1): cdn-icons-png.flaticon.com:443
[2022-11-20 02:20:16,503] DEBUG - https://cdn-icons-png.flaticon.com:443 "GET /256/7569/7569601.png HTTP/1.1" 200 4607
[2022-11-20 02:20:16,523] DEBUG - STREAM b'IHDR' 16 13
[2022-11-20 02:20:16,523] DEBUG - STREAM b'pHYs' 41 9
[2022-11-20 02:20:16,523] DEBUG - STREAM b'tEXt' 62 25
[2022-11-20 02:20:16,523] DEBUG - STREAM b'IDAT' 99 4492
[2022-11-20 02:20:16,524] DEBUG - STREAM b'IHDR' 16 13
[2022-11-20 02:20:16,524] DEBUG - STREAM b'pHYs' 41 9
[2022-11-20 02:20:16,524] DEBUG - STREAM b'IDAT' 62 13353
[2022-11-20 02:21:39,358] DEBUG - STREAM b'IHDR' 16 13
[2022-11-20 02:21:39,358] DEBUG - STREAM b'gAMA' 41 4
[2022-11-20 02:21:39,358] DEBUG - STREAM b'cHRM' 57 32
[2022-11-20 02:21:39,470] DEBUG - STREAM b'bKGD' 101 6
[2022-11-20 02:21:39,470] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-20 02:21:39,470] DEBUG - STREAM b'IDAT' 119 13632
[2022-11-20 02:21:39,471] DEBUG - STREAM b'tEXt' 13763 37
[2022-11-20 02:21:39,471] DEBUG - STREAM b'tEXt' 13812 37
[2022-11-20 02:21:39,471] DEBUG - STREAM b'tEXt' 13861 40
[2022-11-20 02:21:39,471] DEBUG - STREAM b'tEXt' 13913 31
