[2022-11-27 00:17:30,721] CRITICAL - GPU detected
[2022-11-27 00:17:30,722] INFO - Getting video script.
[2022-11-27 00:17:30,732] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:17:30,732] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of unique and interesting keywords relating to theory of computer science programming:\\n\\n-", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:17:30,732] DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2022-11-27 00:17:30,735] DEBUG - Starting new HTTPS connection (1): api.openai.com:443
[2022-11-27 00:17:34,293] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 766
[2022-11-27 00:17:34,294] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=3159 request_id=8b16c5d080840ac8e0c3ed54f253b81a response_code=200
[2022-11-27 00:17:34,297] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:17:34,297] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of 5 interesting beginner topics on where Loaders is used in the context of theory of computer science programming:\\n\\n-", "temperature": 0.7, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:17:38,103] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 492
[2022-11-27 00:17:38,103] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=3665 request_id=9361bed2c5105a0c5abd460944404b44 response_code=200
[2022-11-27 00:17:38,103] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:17:38,103] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a short, unique and interesting title relating to the theory of What are the different types of Loaders? in the form of a video essay title without involving numbers:", "temperature": 1, "max_tokens": 20, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:17:39,099] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 310
[2022-11-27 00:17:39,100] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=857 request_id=05ccd96a6cecb16261d916f4b827f822 response_code=200
[2022-11-27 00:17:39,138] DEBUG - Keyword Loaders, Topics ['What is a Loader?', 'What are the different types of Loaders?', 'What are the benefits of using a Loader?', 'What are some of the challenges of using Loaders?', 'How can Loaders be used to improve the performance of a computer system?'], Topic Different Types of Loaders and How They Work
[2022-11-27 00:17:39,138] INFO - topic Different Types of Loaders and How They Work
[2022-11-27 00:17:39,138] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:17:39,138] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of beginner topics relating to what is Different Types of Loaders and How They Work in the context of theory of computer science programming:\\n\\n- ", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:17:41,616] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 457
[2022-11-27 00:17:41,616] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2338 request_id=59854c2ddbc4370d07f5020b32210c98 response_code=200
[2022-11-27 00:17:41,616] DEBUG - topic: Different Types of Loaders and How They Work, sub topics What is a loader?
- What are the different types of loaders?
- How do loaders work?
- What are the benefits of using a loader?
- What are some of the challenges associated with using loaders?
[2022-11-27 00:17:41,616] INFO - subtopics ['What is a loader?', 'What are the different types of loaders?', 'How do loaders work?', 'What are the benefits of using a loader?', 'What are some of the challenges associated with using loaders?']
[2022-11-27 00:17:41,616] DEBUG - getting summary for topic
[2022-11-27 00:17:41,617] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:17:41,617] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a summary for the following topic in the form of a youtube description in the context of theory of computer science programming:\\n\\ntopic: Different Types of Loaders and How They Work\\n\\nsummary:", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:17:42,142] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 396
[2022-11-27 00:17:42,142] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=376 request_id=5af23096b5ac244bcdae6cb58284366a response_code=200
[2022-11-27 00:17:42,142] INFO - summary In this video, we'll be discussing different types of loaders and how they work. We'll be covering the JVM, Python, and C++ loaders.
[2022-11-27 00:17:42,142] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:17:42,142] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Different Types of Loaders and How They Work in the context of theory of computer science programming summarised for a 9th grader:\\n\\n1. What is a loader?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n2.", "\\n\\n2.", "\\n\\n\\n2."], "echo": false}' message='Post details'
[2022-11-27 00:17:43,028] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 678
[2022-11-27 00:17:43,029] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=738 request_id=0dd3de7a75f3ef8fef0a2fefa4ce160b response_code=200
[2022-11-27 00:17:43,029] DEBUG - passage length 415
[2022-11-27 00:17:43,029] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:17:43,029] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A loader is a piece of code that can be used to help programs run faster by getting them ready to run faster by loading certain needed files that the program may need for its operation. For example, if the program you are trying to run needs to access a file that is located on your computer\'s hard drive, the loader can help the program by getting that file ready to be accessed so that the program can run faster.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:17:50,984] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 527
[2022-11-27 00:17:50,985] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=7817 request_id=a03ec5fa0ca4ca9d3a29dcd2ca20e43e response_code=200
[2022-11-27 00:17:50,985] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:17:50,985] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Different Types of Loaders and How They Work in the context of theory of computer science programming summarised for a 9th grader:\\n\\n1. What is a loader?\\n\\nA loader is a piece of code that can be used to help programs run faster by loading certain needed files that the program may need for its operation. For example, if the program you are trying to run needs to access a file that is located on your computer\'s hard drive, the loader can help the program by getting that file ready to be accessed so that the program can run faster.\\n\\n2. What are the different types of loaders?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n3.", "\\n\\n3.", "\\n\\n\\n3."], "echo": false}' message='Post details'
[2022-11-27 00:17:52,385] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 847
[2022-11-27 00:17:52,385] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1243 request_id=a54c1441b7366face4e089594452f43a response_code=200
[2022-11-27 00:17:52,385] DEBUG - passage length 572
[2022-11-27 00:17:52,385] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:17:52,385] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "There are three main types of loaders: global, static, and dynamic.  global loaders are the most common type; they are automatically given access to all the files that are needed by the program that is running them.  static loaders are similar to global loaders, but they are given limited access to only a few specific files.  dynamic loaders are the least common type; they are designed to be used only when needed. They are given access to all the files that are needed by the program that is running them, but they can also be given access to new files that are needed", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:18:03,942] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 722
[2022-11-27 00:18:03,942] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=11417 request_id=6750efa40a7901663876175b930e96cc response_code=200
[2022-11-27 00:18:03,942] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:18:03,943] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Different Types of Loaders and How They Work in the context of theory of computer science programming summarised for a 9th grader:\\n\\n1. What is a loader?\\n\\nA loader is a piece of code that can be used to help programs run faster by loading certain needed files that the program may need for its operation. For example, if the program you are trying to run needs to access a file that is located on your computer\'s hard drive, the loader can help the program by getting that file ready to be accessed so that the program can run faster.\\n\\n2. What are the different types of loaders?\\n\\nThere are three main types of loaders: global, static, and dynamic.\\nGlobal loaders are the most common type; they are automatically given access to all the files that are needed by the program that is running them.\\nStatic loaders are similar to global loaders, but they are given limited access to only a few specific files.\\nDynamic loaders are the least common type; they are designed to be used only when needed.\\nThey are given access to all the files that are needed by the program that is running them, but they can also be given access to new files that are needed.\\n\\n3. How do loaders work?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n4.", "\\n\\n4.", "\\n\\n\\n4."], "echo": false}' message='Post details'
[2022-11-27 00:18:04,661] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 396
[2022-11-27 00:18:04,662] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=561 request_id=d184030bbd7fb1da5558d3c8ed7d3a02 response_code=200
[2022-11-27 00:18:04,662] DEBUG - passage length 132
[2022-11-27 00:18:04,662] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:18:04,662] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "When a program is running, the loader will find the files that the program needs and will make those files available to the program.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:18:07,791] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 284
[2022-11-27 00:18:07,792] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2985 request_id=3bee365c74e5067ca493d97cebe9a0d2 response_code=200
[2022-11-27 00:18:07,792] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:18:07,792] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Different Types of Loaders and How They Work in the context of theory of computer science programming summarised for a 9th grader:\\n\\n1. What is a loader?\\n\\nA loader is a piece of code that can be used to help programs run faster by loading certain needed files that the program may need for its operation. For example, if the program you are trying to run needs to access a file that is located on your computer\'s hard drive, the loader can help the program by getting that file ready to be accessed so that the program can run faster.\\n\\n2. What are the different types of loaders?\\n\\nThere are three main types of loaders: global, static, and dynamic.\\nGlobal loaders are the most common type; they are automatically given access to all the files that are needed by the program that is running them.\\nStatic loaders are similar to global loaders, but they are given limited access to only a few specific files.\\nDynamic loaders are the least common type; they are designed to be used only when needed.\\nThey are given access to all the files that are needed by the program that is running them, but they can also be given access to new files that are needed.\\n\\n3. How do loaders work?\\n\\nWhen a programme is running, the loader will find the files that the programme needs and will make those files available to the programme.\\n\\n4. What are the benefits of using a loader?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n5.", "\\n\\n5.", "\\n\\n\\n5."], "echo": false}' message='Post details'
[2022-11-27 00:18:08,868] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 683
[2022-11-27 00:18:08,868] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=928 request_id=7bceb60ea12e657d0a42d1da6d3c8f0d response_code=200
[2022-11-27 00:18:08,868] DEBUG - passage length 417
[2022-11-27 00:18:08,868] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:18:08,868] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "There are several benefits to using a loader. For one, loaders can help to speed up the execution of a programme. Additionally, loaders can also help to reduce the amount of data that is needed to be loaded into memory by the programme in order to run. Finally, loaders can also help to ensure that the correct files are loaded into memory, which can prevent errors from occurring during the execution of a programme.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:18:17,170] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 568
[2022-11-27 00:18:17,170] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=8162 request_id=5fe5cb965d2195bb9e0a410c5198e28d response_code=200
[2022-11-27 00:18:17,171] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:18:17,171] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Different Types of Loaders and How They Work in the context of theory of computer science programming summarised for a 9th grader:\\n\\n1. What is a loader?\\n\\nA loader is a piece of code that can be used to help programs run faster by loading certain needed files that the program may need for its operation. For example, if the program you are trying to run needs to access a file that is located on your computer\'s hard drive, the loader can help the program by getting that file ready to be accessed so that the program can run faster.\\n\\n2. What are the different types of loaders?\\n\\nThere are three main types of loaders: global, static, and dynamic.\\nGlobal loaders are the most common type; they are automatically given access to all the files that are needed by the program that is running them.\\nStatic loaders are similar to global loaders, but they are given limited access to only a few specific files.\\nDynamic loaders are the least common type; they are designed to be used only when needed.\\nThey are given access to all the files that are needed by the program that is running them, but they can also be given access to new files that are needed.\\n\\n3. How do loaders work?\\n\\nWhen a programme is running, the loader will find the files that the programme needs and will make those files available to the programme.\\n\\n4. What are the benefits of using a loader?\\n\\nThere are several benefits to using a loader.\\n\\nFor one, loaders can help to speed up the execution of a program.\\n\\nAdditionally, loaders can also help to reduce the amount of data that is needed to be loaded into memory by the program in order to run.\\n\\nFinally, loaders can also help to ensure that the correct files are loaded into memory, which can prevent errors from occurring during the execution of a program.\\n\\n5. What are some of the challenges associated with using loaders?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n6.", "\\n\\n6.", "\\n\\n\\n6."], "echo": false}' message='Post details'
[2022-11-27 00:18:17,988] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 573
[2022-11-27 00:18:17,988] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=669 request_id=ef6f906cce77f9f19c6ef53096111272 response_code=200
[2022-11-27 00:18:17,989] DEBUG - passage length 307
[2022-11-27 00:18:17,989] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:18:17,989] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "There are several challenges associated with using loaders.  One challenge is that loaders can sometimes cause a program to run more slowly than if the files that the programme needs were not loaded into memory.  Another challenge is that loaders can sometimes be difficult to configure and setup correctly.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:18:22,093] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 452
[2022-11-27 00:18:22,094] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=3967 request_id=f96ea4e0b5575d967e7d0698e0572577 response_code=200
[2022-11-27 00:18:22,095] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:22,263] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/playlists?part=id&id=UC_x5XG1OV2P6uZZ5FSM9Ttw&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&maxResults=2 HTTP/1.1" 200 None
[2022-11-27 00:18:22,267] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:22,702] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/search?part=snippet&type=video&maxResults=50&order=relevance&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&q=What%20is%20a%20loader?%20in%20theory%20of%20computer%20science%20programming&publishedAfter=2000-01-01T00:00:00Z&publishedBefore=3000-01-01T00:00:00Z HTTP/1.1" 200 None
[2022-11-27 00:18:22,708] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:22,773] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=BY_2CwRwbtE HTTP/1.1" 200 None
[2022-11-27 00:18:22,775] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:22,843] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=nwDq4adJwzM HTTP/1.1" 200 None
[2022-11-27 00:18:22,846] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:22,915] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=cJDRShqtTbk HTTP/1.1" 200 None
[2022-11-27 00:18:22,917] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:22,965] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=Z5JC9Ve1sfI HTTP/1.1" 200 None
[2022-11-27 00:18:22,967] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,027] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=zOjov-2OZ0E HTTP/1.1" 200 None
[2022-11-27 00:18:23,029] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,082] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=Jcan8YfLfLs HTTP/1.1" 200 None
[2022-11-27 00:18:23,085] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,142] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=N2y6csonII4 HTTP/1.1" 200 None
[2022-11-27 00:18:23,147] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,207] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=xpYYixIaFdg HTTP/1.1" 200 None
[2022-11-27 00:18:23,209] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,255] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=rkZzg7Vowao HTTP/1.1" 200 None
[2022-11-27 00:18:23,257] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,324] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=bDsTwHIqs2g HTTP/1.1" 200 None
[2022-11-27 00:18:23,327] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,395] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=AkFi90lZmXA HTTP/1.1" 200 None
[2022-11-27 00:18:23,397] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,463] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=jR7pSrhE7d8 HTTP/1.1" 200 None
[2022-11-27 00:18:23,465] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,540] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=E6jtj-7xJoA HTTP/1.1" 200 None
[2022-11-27 00:18:23,542] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,594] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=iZnLZFRylbs HTTP/1.1" 200 None
[2022-11-27 00:18:23,597] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,657] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=GjNp0bBrjmU HTTP/1.1" 200 None
[2022-11-27 00:18:23,658] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,716] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ulYgU2rP8Gk HTTP/1.1" 200 None
[2022-11-27 00:18:23,719] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,775] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=z6ym480PQvE HTTP/1.1" 200 None
[2022-11-27 00:18:23,778] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,829] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=p3q5zWCw8J4 HTTP/1.1" 200 None
[2022-11-27 00:18:23,831] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,888] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=SzJ46YA_RaA HTTP/1.1" 200 None
[2022-11-27 00:18:23,891] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,942] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=qcEBXrqFLe8 HTTP/1.1" 200 None
[2022-11-27 00:18:23,944] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:23,990] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=YFIvJVsvIsE HTTP/1.1" 200 None
[2022-11-27 00:18:23,993] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:24,043] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=QNBKWHneOxk HTTP/1.1" 200 None
[2022-11-27 00:18:24,045] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:24,095] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=k9WqpQp8VSU HTTP/1.1" 200 None
[2022-11-27 00:18:24,097] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:24,157] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=BiBFQbIl7ys HTTP/1.1" 200 None
[2022-11-27 00:18:24,160] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:18:24,211] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=4UxB5MlhWvE HTTP/1.1" 200 None
[2022-11-27 00:18:24,212] DEBUG - Hashtags ['#spcc', '#lmt', '#lastmomenttuitions', '#ictvideos', '#teacherresources', '#secondaryteachers', '#computer', '#science', '#domainofscience', '#cprogramming', '#languagetranslator', '#jennyslectures', '#learncoding', '#ask4help', '#learningcwithprogramming', '#learntocode', '#programming', '#softwareengineer', '#coding', '#python', '#programmingknowledge', '#ml', '#ai', '#javatutorials', '#javalectures', '#inheritanceinjava']
[2022-11-27 00:18:24,212] DEBUG - Top Hashtags ['#spcc', '#lmt', '#lastmomenttuitions', '#ictvideos', '#teacherresources']
[2022-11-27 00:18:24,212] DEBUG - Tags ['john green', 'hank green', 'vlogbrothers', 'crash course', 'crashcourse', 'education', 'programming', 'plugboards', 'punch cards', 'punched paper tape', 'neumann architecture', 'panel programming', 'switches', 'jacquard', 'loom', 'computers', 'computing', 'computer science', 'programming languages', 'history', 'assembler', 'linker', 'loader', 'log2base2', 'tom scott', 'tomscott', 'the basics', 'computer science', 'fetch-execute', 'fetch-execute cycle', 'fetch-decode-execute cycle', 'fetch-decode-execute', 'cpu', 'ram', 'c2000', 'lastmomenttuitions', 'lastmomenttuition', 'loaders', 'inhindi', 'howto', 'compiler', 'interpreter', 'assembler', 'linker', 'loader', 'difference between compiler and interpreter', 'compiler interpreter linker and loader', 'what is assembler compiler and interpreter', 'distinguish between compiler and assembler', 'linker and loader in hindi', 'c programming', 'system programming and compiler construction in hindi', 'spcc', 'spcc lmt', 'spcc in hindi', 'c programming full course', 'loader in hindi', 'science', 'quanta', 'quanta magazine', 'explainer', 'science explainer', 'science video', 'educational video', 'sundeep', 'saradhi', 'kanthety', 'computer components', 'computer assembling', 'parts of computer', 'motherboard', 'fundamentals of computer', 'basics of computer', 'computer basics', 'computer fundamentals', 'booting', 'machine code', 'computer languages', 'language types', 'language translators', 'system software', 'application software', 'utility software', 'sandeep', 'booting process', 'computer booting', 'hard booting', 'soft booting', 'mbr', 'bootloader', 'bios', 'post', 'warm booting', 'cold booting', 'rom', 'ram', 'masterboot', 'bettina bair', 'computer', 'computer', 'architecture', 'how', 'works', "what's", 'inside', 'computer', 'inside', 'mouse', 'central', 'processing', 'unit', 'bios', 'flaming', 'medusa', 'studios', 'ted', 'ted-ed', 'ted', 'ed', 'tededucation', 'data structure tutorials', 'operating system', 'data structure and algorithms', 'jayanti khatri lamba', 'jennys lectures', 'jenny data structures', 'jennys lectures ds', 'jenny lamba', 'jennys baby', 'jennys lectures baby', 'data structures', 'tom scott', 'tomscott', 'the basics', 'computer science', 'ict', 'ict resources', 'ict videos', 'information and communications technology', 'operating systems', 'educational resources', 'hardware', 'how do operating systems work', 'software', 'teaching resources', 'technologies', 'technology', 'technology videos', 'what is an operating system', 'anil deshpande', 'codetutor', 'anil v deshpande', 'loaders', 'loader', 'cursorloader', 'loadermanager', 'getloadermanager', 'loadermanager.loadercallbacks', 'oncreateloader', 'onloadfinished', 'onloaderreset', 'cursor', 'loading', 'animation', 'video', 'p5', 'tutorial', 'javascript', 'coding', 'js', 'p5.js', 'creative coding', 'javascript (programming language)', 'p5.js tutorial', 'p5 js', 'p5js', 'load', 'animate', 'bar', 'senanan kanawat', 'carlos palomares', 'computer memory', 'hard drive', 'coding', 'bits', 'software', 'binary digits', 'central processing unit', 'computer brain', 'ted', 'ted-ed', 'ted education', 'ted ed', 'data processing', 'computer programming', 'random access memory', 'computers', 'science', 'computer science', 'machine learning', 'explainer', 'animation', 'artificial intelligence', 'software engineering', 'neural networks', 'scicomm', 'stem', 'cpu', 'alan turing', 'information theory', 'cryptography', 'big data', 'supercomputing', 'robots', 'operating system', 'data structure and algorithms', 'jayanti khatri lamba', 'jennys lectures', 'jenny data structures', 'jenny lamba', 'jennys lectures baby', 'data structures', 'language translators', 'compiler', 'interpreter', 'assembler', 'working of language translators', 'best c programming tutorials', 'best channel for programming', 'c programming tutorials for beginners', 'ugc net computer science preparation material', 'gate cs lectures', 'c jennys lectures', 'python programming tutorials for beginners', 'st', 'stmicro', 'stmicroelectronics', '&s5hq4xya9l2th_#', 'what is compiler', 'what is interpreter', 'compiler and interpreter', 'difference between compiler and interpreter in hindi', 'what is compiler in c language', 'what is compiler in computer', 'what is interpreter in c', 'interpreter with example', 'what is the use of interpreter', 'which is better compiler or interpreter', 'what is an interpreter and compiler', 'software engineer', 'remote', 'startup', 'programming', 'software engineering', 'new grad software engineer', 'fintech', 'computer science', 'big tech', 'day in the life of a software engineer', 'developer', 'nicholas t', 'pirate king', 'joma', 'mayuko', 'frying pan', 'software developer', 'faang', 'internship', 'internship interview', 'data structures', 'leetcode', 'bolt', 'recruiting', 'internships', 'learn to code', 'python', 'learnhowtocode', 'learn to code for beginners', 'code', 'how to learn to code', 'how to learn programming', 'interviews', 'ml', 'so', 'machine learning', 'artificial intelligence', 'python', 'linear regression', 'datasets', 'svm', 'linearsvc', 'svc model', 'scikit-learn tutorial', 'scikit-learn', 'sklearn', 'pandas', 'python3', 'sundeep', 'saradhi', 'kanthety', 'java programming', 'java basics', 'java fundamentals', 'beginners', 'programming fundamentals', 'java faq', 'java introduction', 'object oriented', 'oops', 'oop concepts', 'abstraction', 'inheritance', 'polymorphism', 'encapsulation', 'class', 'object', 'java compiler', 'method overloading', 'method overriding', 'single inheritance', 'extends keyword', 'nultilevel', 'hierarchy', 'child class', 'sub class', 'derived class', 'parent class', 'super class', 'base class', 'aquiring properties']
[2022-11-27 00:18:24,216] DEBUG - Top Tags ['computer science', 'assembler', 'loader', 'computer', 'ted', 'data structures', 'programming', 'computers', 'linker', 'tom scott', 'tomscott', 'the basics', 'cpu', 'ram', 'loaders', 'compiler', 'interpreter', 'science', 'explainer', 'sundeep', 'saradhi', 'kanthety']
