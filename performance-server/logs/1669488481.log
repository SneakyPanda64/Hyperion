[2022-11-26 18:48:01,084] CRITICAL - GPU detected
[2022-11-26 18:48:01,085] INFO - Getting video script.
[2022-11-26 18:48:01,094] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:01,095] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of unique and interesting keywords relating to basic theory of computer science programming concepts:\\n\\n-", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-26 18:48:01,095] DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2022-11-26 18:48:01,097] DEBUG - Starting new HTTPS connection (1): api.openai.com:443
[2022-11-26 18:48:03,244] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 426
[2022-11-26 18:48:03,245] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1688 request_id=b540b783a75ac98d435d9b1813b0af2f response_code=200
[2022-11-26 18:48:03,248] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:03,248] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a list of 5 interesting beginner topics on where Recursive programming is used in the context of theory of computer science programming concepts:\\n-", "temperature": 0.7, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-26 18:48:03,957] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 402
[2022-11-26 18:48:03,957] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=501 request_id=683157ca6155e58b55ecedf2566f5e41 response_code=200
[2022-11-26 18:48:03,958] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:03,958] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a short, unique and interesting title relating to the theory of  Recursive data structures in the form of a video essay title without involving numbers:", "temperature": 1, "max_tokens": 20, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-26 18:48:04,821] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 303
[2022-11-26 18:48:04,822] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=717 request_id=0acb347c4c49e1c929db21c24c6e6a8c response_code=200
[2022-11-26 18:48:04,856] DEBUG - Keyword Recursive programming, Topics [' Recursive algorithms', ' Recursive data structures', ' Recursive functions', ' Recursive principles', ' Recursive algorithms for solving problems'], Topic Recursive Data Structures: The Basics
[2022-11-26 18:48:04,856] INFO - topic Recursive Data Structures: The Basics
[2022-11-26 18:48:04,857] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:04,857] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of beginner topics relating to what is Recursive Data Structures: The Basics in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-26 18:48:07,903] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 662
[2022-11-26 18:48:07,903] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2901 request_id=84dfa082b8f16bc618df5eb1ea4c2847 response_code=200
[2022-11-26 18:48:07,903] DEBUG - topic: Recursive Data Structures: The Basics, sub topics What is a recursive data structure?
-What are the basic properties of a recursive data structure?
-What are the benefits of using a recursive data structure?
-What are some common examples of recursive data structures?
-How can a recursive data structure be implemented in a programming language?
-What are some challenges that need to be considered when working with recursive data structures?
[2022-11-26 18:48:07,903] INFO - subtopics ['What is a recursive data structure?', 'What are the basic properties of a recursive data structure?', 'What are the benefits of using a recursive data structure?', 'What are some common examples of recursive data structures?', 'How can a recursive data structure be implemented in a programming language?', 'What are some challenges that need to be considered when working with recursive data structures?']
[2022-11-26 18:48:07,903] DEBUG - getting summary for topic
[2022-11-26 18:48:07,904] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:07,904] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a summary for the following topic in the form of a youtube description in the context of theory of computer science programming concepts:\\n\\ntopic: Recursive Data Structures: The Basics\\n\\nsummary:", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-26 18:48:08,969] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 631
[2022-11-26 18:48:08,969] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=808 request_id=37ee51e54d18ecb41d909c5330f4d0ba response_code=200
[2022-11-26 18:48:08,970] INFO - summary In this video, we'll be discussing the basics of recursive data structures. We'll be looking at the simplest form of a recursive data structure, the stack, and then moving on to more complex structures, such as the heap and the tree. We'll also be discussing the benefits and drawbacks of each structure, and how to use them effectively in your programming projects.
[2022-11-26 18:48:08,970] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:08,970] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Expand greatly upon the topic of Recursive Data Structures The Basics in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a recursive data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n2.", "\\n\\n2.", "\\n\\n\\n2."], "echo": false}' message='Post details'
[2022-11-26 18:48:11,235] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 448
[2022-11-26 18:48:11,235] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2121 request_id=724773ac3ad7e10cff4fbe85894cd574 response_code=200
[2022-11-26 18:48:11,236] DEBUG - passage length 184
[2022-11-26 18:48:11,236] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-26 18:48:11,236] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A recursive data structure is a data structure that is defined in terms of itself. This means that the data structure can be thought of as being made up of smaller instances of itself.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-26 18:48:14,050] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 351
[2022-11-26 18:48:14,051] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2673 request_id=83f9468105101d6ba91aae875af748dc response_code=200
[2022-11-26 18:48:14,051] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:14,051] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Expand greatly upon the topic of Recursive Data Structures The Basics in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a recursive data structure?\\n\\nA recursive data structure is a data structure that is defined in terms of itself. This means that the data structure can be thought of as being made up of smaller instances of itself (also see recursion).\\n\\n2. What are the basic properties of a recursive data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n3.", "\\n\\n3.", "\\n\\n\\n3."], "echo": false}' message='Post details'
[2022-11-26 18:48:17,143] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
[2022-11-26 18:48:17,143] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2947 request_id=9e7f0545dc09b5a55c64937485bd3f4c response_code=200
[2022-11-26 18:48:17,144] DEBUG - passage length 270
[2022-11-26 18:48:17,144] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-26 18:48:17,144] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "\\u2022 A recursive data structure has a base case, which is a simple case that can be solved without recursion.\\n\\n\\u2022 A recursive data structure has a recursive case, which is a more complex case that can be solved by breaking it down into smaller instances of the same problem.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-26 18:48:21,652] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 None
[2022-11-26 18:48:21,653] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4366 request_id=d1d0269679d1152a37d0b76c9be45050 response_code=200
[2022-11-26 18:48:21,653] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:21,653] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Expand greatly upon the topic of Recursive Data Structures The Basics in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a recursive data structure?\\n\\nA recursive data structure is a data structure that is defined in terms of itself. This means that the data structure can be thought of as being made up of smaller instances of itself (also see recursion).\\n\\n2. What are the basic properties of a recursive data structure?\\n\\n\\u2022 A recursive data structure has a base case, which is a simple case that can be solved without recursion. This is when the problem can be solved without calling itself.\\n\\n\\u2022 A recursive data structure has a recursive case, which is a more complex case that can be solved by breaking it down into smaller instances of the same problem. This is when the problem is solved by calling itself.\\n\\n3. What are the benefits of using a recursive data structure?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n4.", "\\n\\n4.", "\\n\\n\\n4."], "echo": false}' message='Post details'
[2022-11-26 18:48:25,523] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
[2022-11-26 18:48:25,524] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=3723 request_id=f676382f9b56f1835a0a07091123ee34 response_code=200
[2022-11-26 18:48:25,524] DEBUG - passage length 601
[2022-11-26 18:48:25,524] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-26 18:48:25,524] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "There are many benefits of using a recursive data structure, including:\\n\\n\\u2022 They can be easier to understand than non-recursive data structures. This is because the structure of the data is often more apparent when it is defined recursively.\\n\\n\\u2022 They can be easier to code than non-recursive data structures. This is because the code for a recursive data structure often follows a natural, step-by-step progression.\\n\\n\\u2022 They can be more efficient than non-recursive data structures. This is because a recursive data structure can often reuse code that has already been written, instead of having to write", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-26 18:48:27,529] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 None
[2022-11-26 18:48:27,530] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=1861 request_id=15d4fbe6c6cb6936954f7890032b0b8b response_code=200
[2022-11-26 18:48:27,530] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:27,530] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Expand greatly upon the topic of Recursive Data Structures The Basics in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a recursive data structure?\\n\\nA recursive data structure is a data structure that is defined in terms of itself. This means that the data structure can be thought of as being made up of smaller instances of itself (also see recursion).\\n\\n2. What are the basic properties of a recursive data structure?\\n\\n\\u2022 A recursive data structure has a base case, which is a simple case that can be solved without recursion. This is when the problem can be solved without calling itself.\\n\\n\\u2022 A recursive data structure has a recursive case, which is a more complex case that can be solved by breaking it down into smaller instances of the same problem. This is when the problem is solved by calling itself.\\n\\n3. What are the benefits of using a recursive data structure?\\n\\nThere are many benefits of using a recursive data structure, including:\\n\\n\\u2022 They can be easier to understand than nonrecursive data structures. This is because the structure of the data is often more apparent when it is defined recursively.\\n\\n\\u2022 They can be easier to code than nonrecursive data structures. This is because the code for a recursive data structure often follows a natural, stepbystep progression.\\n\\n\\u2022 They can be more efficient than nonrecursive data structures. This is because a recursive data structure can often reuse code that has already been written, instead of having to write it again.\\n\\n4. What are some common examples of recursive data structures?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n5.", "\\n\\n5.", "\\n\\n\\n5."], "echo": false}' message='Post details'
[2022-11-26 18:48:29,225] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
[2022-11-26 18:48:29,226] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1546 request_id=32c0829ec61898c27241e46d339e4130 response_code=200
[2022-11-26 18:48:29,226] DEBUG - passage length 90
[2022-11-26 18:48:29,226] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-26 18:48:29,226] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "Some common examples of recursive data structures are:\\n\\n\\u2022 Trees\\n\\u2022 Graphs\\n\\u2022 Lists\\n\\u2022 Strings", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-26 18:48:30,829] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 None
[2022-11-26 18:48:30,829] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=1436 request_id=708825b0f7efe126c45b5fb616825777 response_code=200
[2022-11-26 18:48:30,830] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:30,830] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Expand greatly upon the topic of Recursive Data Structures The Basics in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a recursive data structure?\\n\\nA recursive data structure is a data structure that is defined in terms of itself. This means that the data structure can be thought of as being made up of smaller instances of itself (also see recursion).\\n\\n2. What are the basic properties of a recursive data structure?\\n\\n\\u2022 A recursive data structure has a base case, which is a simple case that can be solved without recursion. This is when the problem can be solved without calling itself.\\n\\n\\u2022 A recursive data structure has a recursive case, which is a more complex case that can be solved by breaking it down into smaller instances of the same problem. This is when the problem is solved by calling itself.\\n\\n3. What are the benefits of using a recursive data structure?\\n\\nThere are many benefits of using a recursive data structure, including:\\n\\n\\u2022 They can be easier to understand than nonrecursive data structures. This is because the structure of the data is often more apparent when it is defined recursively.\\n\\n\\u2022 They can be easier to code than nonrecursive data structures. This is because the code for a recursive data structure often follows a natural, stepbystep progression.\\n\\n\\u2022 They can be more efficient than nonrecursive data structures. This is because a recursive data structure can often reuse code that has already been written, instead of having to write it again.\\n\\n4. What are some common examples of recursive data structures?\\n\\nSome common examples of recursive data structures are\\n\\n\\u2022 Trees \\n\\u2022 Graphs \\n\\u2022 Lists \\n\\u2022 Strings\\n\\n5. How can a recursive data structure be implemented in a programming language?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n6.", "\\n\\n6.", "\\n\\n\\n6."], "echo": false}' message='Post details'
[2022-11-26 18:48:33,505] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 556
[2022-11-26 18:48:33,506] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2530 request_id=bff50422aefff3cc9439e6661cb09969 response_code=200
[2022-11-26 18:48:33,506] DEBUG - passage length 288
[2022-11-26 18:48:33,506] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-26 18:48:33,506] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A recursive data structure can be implemented in a programming language by using a function. This function will take some input, process it, and then return some output. The function will then call itself with a different input, and the process will repeat until the base case is reached.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-26 18:48:37,465] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 727
[2022-11-26 18:48:37,465] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=3816 request_id=c5c6cef3ab97ea6678e1b23a1e248fb9 response_code=200
[2022-11-26 18:48:37,465] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-26 18:48:37,465] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Expand greatly upon the topic of Recursive Data Structures The Basics in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a recursive data structure?\\n\\nA recursive data structure is a data structure that is defined in terms of itself. This means that the data structure can be thought of as being made up of smaller instances of itself (also see recursion).\\n\\n2. What are the basic properties of a recursive data structure?\\n\\n\\u2022 A recursive data structure has a base case, which is a simple case that can be solved without recursion. This is when the problem can be solved without calling itself.\\n\\n\\u2022 A recursive data structure has a recursive case, which is a more complex case that can be solved by breaking it down into smaller instances of the same problem. This is when the problem is solved by calling itself.\\n\\n3. What are the benefits of using a recursive data structure?\\n\\nThere are many benefits of using a recursive data structure, including:\\n\\n\\u2022 They can be easier to understand than nonrecursive data structures. This is because the structure of the data is often more apparent when it is defined recursively.\\n\\n\\u2022 They can be easier to code than nonrecursive data structures. This is because the code for a recursive data structure often follows a natural, stepbystep progression.\\n\\n\\u2022 They can be more efficient than nonrecursive data structures. This is because a recursive data structure can often reuse code that has already been written, instead of having to write it again.\\n\\n4. What are some common examples of recursive data structures?\\n\\nSome common examples of recursive data structures are\\n\\n\\u2022 Trees \\n\\u2022 Graphs \\n\\u2022 Lists \\n\\u2022 Strings\\n\\n5. How can a recursive data structure be implemented in a programming language?\\n\\nA recursive data structure can be implemented in a programming language by using a function. This function will take some input, process it, and then return some output. The function will then call itself with a different input, and the process will repeat until the base case is reached. \\n\\nIn a nonrecursive function, the return statement will be the last statement executed. In a recursive function, the return statement will not be the last statement executed, as execution will continue at the function call. The return statement will return the value of the function call.\\n\\n6. What are some challenges that need to be considered when working with recursive data structures?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n7.", "\\n\\n7.", "\\n\\n\\n7."], "echo": false}' message='Post details'
[2022-11-26 18:48:41,126] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
[2022-11-26 18:48:41,126] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=3515 request_id=a1d3b3e92af1af3ec28d4b9f78d51a3c response_code=200
[2022-11-26 18:48:41,127] DEBUG - passage length 404
[2022-11-26 18:48:41,127] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-26 18:48:41,127] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "Some challenges that need to be considered when working with recursive data structures are:\\n\\n\\u2022 Memory management. This is because a recursive data structure can use a lot of memory.\\n\\n\\u2022 Time complexity. This is because a recursive data structure can take a long time to solve a problem.\\n\\n\\u2022 Implementation. This is because a recursive data structure can be difficult to implement in a programming language.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar.", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-26 18:48:43,939] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 None
[2022-11-26 18:48:43,939] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2651 request_id=4dfb18d5c6251cdadfdcc203b4e4e078 response_code=200
[2022-11-26 18:48:43,940] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:44,096] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/playlists?part=id&id=UC_x5XG1OV2P6uZZ5FSM9Ttw&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&maxResults=2 HTTP/1.1" 200 None
[2022-11-26 18:48:44,100] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,208] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/search?part=snippet&type=video&maxResults=50&order=relevance&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&q=What%20is%20a%20recursive%20data%20structure?%20in%20theory%20of%20computer%20science%20programming%20concepts&publishedAfter=2000-01-01T00:00:00Z&publishedBefore=3000-01-01T00:00:00Z HTTP/1.1" 200 None
[2022-11-26 18:48:45,213] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,288] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=B0NtAFf4bvU HTTP/1.1" 200 None
[2022-11-26 18:48:45,291] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,355] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=QSoLKHUqwmA HTTP/1.1" 200 None
[2022-11-26 18:48:45,357] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,408] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=GzJoqJO1zdI HTTP/1.1" 200 None
[2022-11-26 18:48:45,410] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,478] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=N61yojktcH8 HTTP/1.1" 200 None
[2022-11-26 18:48:45,481] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,553] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=_tu_BgVj2-M HTTP/1.1" 200 None
[2022-11-26 18:48:45,556] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,629] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=9bsK03SlmNM HTTP/1.1" 200 None
[2022-11-26 18:48:45,632] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,679] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=5Boqfjissv0 HTTP/1.1" 200 None
[2022-11-26 18:48:45,681] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,742] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=yV48gGo5Mkc HTTP/1.1" 200 None
[2022-11-26 18:48:45,745] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,802] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=IJDJ0kBx2LM HTTP/1.1" 200 None
[2022-11-26 18:48:45,804] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,855] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=I37kGX-nZEI HTTP/1.1" 200 None
[2022-11-26 18:48:45,858] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,922] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=-uleG_Vecis HTTP/1.1" 200 None
[2022-11-26 18:48:45,924] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:45,980] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=kepBmgvWNDw HTTP/1.1" 200 None
[2022-11-26 18:48:45,982] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,042] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=Ge0Udbws1kc HTTP/1.1" 200 None
[2022-11-26 18:48:46,044] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,102] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=FSV485hck7g HTTP/1.1" 200 None
[2022-11-26 18:48:46,105] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,167] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=IRdtkDpBoV4 HTTP/1.1" 200 None
[2022-11-26 18:48:46,169] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,218] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=8hly31xKli0 HTTP/1.1" 200 None
[2022-11-26 18:48:46,220] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,281] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=YAdLFsTG70w HTTP/1.1" 200 None
[2022-11-26 18:48:46,283] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,339] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=D6xkbGLQesk HTTP/1.1" 200 None
[2022-11-26 18:48:46,342] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,402] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=KQZIBckWK-s HTTP/1.1" 200 None
[2022-11-26 18:48:46,406] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,460] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=whYm5cqigL8 HTTP/1.1" 200 None
[2022-11-26 18:48:46,462] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,511] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=__vX2sjlpXU HTTP/1.1" 200 None
[2022-11-26 18:48:46,514] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,568] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ggk7HbcnLG8 HTTP/1.1" 200 None
[2022-11-26 18:48:46,570] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,616] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ngCos392W4w HTTP/1.1" 200 None
[2022-11-26 18:48:46,619] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,662] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=5_5oE5lgrhw HTTP/1.1" 200 None
[2022-11-26 18:48:46,665] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-26 18:48:46,716] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=LFKZLXVO-Dg HTTP/1.1" 200 None
[2022-11-26 18:48:46,718] DEBUG - Hashtags ['#recursion', '#whatisrecursion', '#recursionexplained', '#recursiontutorial', '#recursioninprogramming', '#datastrcutures', '#datastructuretutorial', '#datastructureandalgorithmstutorial', '#datastrcutures', '#simplilearn', '#datastructures', '#codinginterview', '#coding', '#recursionpython', '#recursion', '#datastructure', '#pythonrecursiontutorial', '#recursionproblems', '#pythonrecursion', '#recursioninpython', '#recursivefunctionpython', '#recursiontutorial', '#geekific', '#treesandrecursion', '#recursivedatastructures', '#datastructuresbyneso', '#datastructures', '#stacks', '#compsci', '#programming', '#tech', '#cprogrammingbyneso', '#cprogramming', '#recursion', '#learncoding', '#recursivefunction', '#ask4help', '#recursioninc', '#cprogramming', '#findfactorialnumberusingrecursivefunction', '#cppprogramming', '#stackinc', '#learncoding', '#cprogramming', '#stackimplementationusingarray', '#stackindatastructure', '#bigo', '#cprogrammingbyneso', '#cprogramming', '#recursion']
[2022-11-26 18:48:46,718] DEBUG - Top Hashtags ['#recursion', '#cprogramming', '#recursiontutorial', '#datastrcutures', '#datastructures']
[2022-11-26 18:48:46,718] DEBUG - Tags ['recursion', 'recursion java', 'recursion python', 'recursion explained', 'what is recursion?', 'recursion tutorial', 'introduction to recursion', 'recursion in data structure', 'recursion in c', 'recursion in c programming', 'recursion example', 'what is recursion', 'how recursion works', 'how recursion works in memory area', 'types of recursion', 'recursive function', 'recursive function in c programming', 'code', 'learn data structures and algorithms', 'data structures in c', 'data structures and algorithms', 'data structures', 'data structures simplilearn', 'simplilearn', 'programming', 'web development', 'javascript', 'learn programming', 'learn to code', 'coding', 'software development', 'become a software developer', 'binary tree', 'python', 'coding interview', 'data structures', 'algorithms', 'learn data structures', 'tree data structure', 'trees coding', 'coding interview prep', 'computing', 'computer science', 'ocr', 'craigndave', 'cnd', 'ocr a level', 'ocr a level computer science', 'computer science h446', 'revise computer science', 'computing revision', 'programming techniques', 'recursion', 'recursion vs iteration', 'recursive techniques', 'recursion python', 'recursion in data structure', 'simple explanation of recursion', 'data structures and algorithms recursion', 'python recursion tutorial', 'python recursion problems', 'python recursion', 'recursion in python', 'recursion in python example', 'recursive function in python', 'recursive function python', 'recursion algorithm', 'recursion data structure', 'what is recursion in python', 'python recursive function', 'recursive function with python code', 'recursive problems and algorithms', 'c++', 'c++ coding', 'c++ full course', 'c++ placement course', 'how to code', 'programming', 'college placement course', 'c++ language', 'geekific', 'programming', 'coding', 'computer science', 'recursive methods', 'recursion', 'stop condition', 'abort condition', 'recursion example', 'recursion explained', 'recursion tutorial', 'recursion made simple', 'recursive methods explained', 'recursive methods tutorial', 'java tutorial', 'java example recursion', 'recursion java', 'recursion in java', 'abort recursion', 'recursion in trees', 'tree recursion', 'recursive data structures', 'recursion with trees', 'nature of trees', 'in order traversal', 'tree insersion', 'stacks', 'stacks data structure', 'data structure stacks', 'stack', 'stacks basics', 'basics of stacks', 'stack operations', 'definition of stack', 'push and pop operations in stacks', 'stack push and pop operations', 'data structures', 'data structures for gate', 'gate data structures', 'webdev', 'app development', 'lesson', 'tutorial', 'recursion', 'recursion in c', 'recursive function', 'recursion examples', 'recursion examples in c', 'recursion explained', 'recursion program in c', 'c programming', 'c programming basics', 'c programming recursion', 'c programming tutorial', 'c programming for interview', 'top 10 algorithms for the coding interview', 'most important algorithms and data structures', 'important topics for coding interview', 'coding interview concepts', 'coding interview algorithms', 'coding interview data structures and algorithms', 'coding interview tips', 'most important concepts for coding interviews', 'what to know for coding interviews', 'coding interview preparation', 'important algorithms and data structures', 'top coding interview questions', 'coding interview data structures', 'learn how to code python', 'learn how to code for beginners', 'learn how to code java', 'learn how to code and hack', 'learn how to code an app', 'learn how to code a website', 'learn how to code and get a job', 'learn how to code beginner', 'learn how to code basics', 'how do i learn how to code', 'learn how to code easy', 'easiest way to learn how to code', 'everyone should learn how to code', 'learn how to code from scratch', 'learn how to code for dummies', 'how to learn how to code for free', 'find factorial of a number in c using recursion', 'c program to calculate factorial of a number using recursion', 'find factorial of a number using recursion', 'find factorial of a number in c', 'c program to find factorial of a number', 'program to find factorial of a number using recursion', 'wap to find factorial of a number using recursion', 'recursion in c', 'recursive function in c programming', 'recursion in c programming', 'c programming', 'learn coding', 'c++ programming', 'operating system', 'data structure and algorithms', 'what is tree data structure', 'introduction to trees in data structure', 'tree and its terminologies', 'tree definition', 'tree in data structure', 'binary tree and its types', 'types of tree in data structure', 'what is binary tree', 'data structure tutorials', 'ugc net computer science preparation', 'gate cs study material', 'jenny data structures', "jenny's lecture", 'jennys lectures cs/it net&jrf', 'what is binary search tree', 'data structures notes', 'big o notation', 'big o notation tutorial', 'big o notation explained', 'time complexity', 'time complexity tutorial', 'time complexity explained', 'big o notation python', 'big o notation java', 'data structure tutorials', 'operating system', 'data structure and algorithms', 'jayanti khatri lamba', 'jennys lectures', 'jenny data structures', 'jennys lectures ds', 'jenny lamba', 'jennys baby', 'jennys lectures baby', 'data structures', 'recursion in c programming', 'introduction to recursion in c', 'what is recursion in c', 'what is recursive function', 'c programming tutorials for beginners', 'c jennys lectures', 'what is pointer in c', 'gate cs lectures', 'gate previous year questiona with answers', 'stack in c programming', 'stack in data structure', 'stack program in c using array', 'what is stack explain with example', 'write a algorithm for push and pop operation in stack', 'stack in c', 'stack program in c', 'stack and queue in c++ class 12', 'stack using array in c', 'stack in c programming', 'stack implementation in c using array', 'stack in data structure using c', 'stack implementation using array', 'stack implementation in c', 'c programming', 'c++ programming', 'push and pop operation in stack', 'big-o', 'big-oh', 'big o notation', 'big oh notation', 'big o', 'big oh', 'algorithms', 'runtime', 'run time', 'complexity', 'recursion', 'recursion in c', 'recursion examples', 'recursion explanation', 'steps to write recursive function', 'recursive function', 'recursive procedure', 'recursive program', 'recursive program in c', 'recursive function examples', 'c programming', 'c programming lectures', 'c programming for gate', 'gate c programming', 'c programming for begineers', 'graph theory', 'graph theory intro', 'graph theory introduction', 'graph theory terminology', 'graph theory definition', 'graphs computer science', 'graph theory computer science', 'graph theory guide', 'graph theory beginners']
[2022-11-26 18:48:46,720] DEBUG - Top Tags ['recursion', 'recursion in c', 'data structures', 'c programming', 'recursion explained', 'recursion in c programming', 'recursive function', 'programming', 'recursion java', 'recursion python', 'recursion tutorial']
