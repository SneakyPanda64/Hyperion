[2022-11-27 00:37:23,565] CRITICAL - GPU detected
[2022-11-27 00:37:23,567] INFO - Getting video script.
[2022-11-27 00:37:23,578] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:23,578] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of unique and interesting keywords relating to theory of computer science programming concepts:\\n\\n-", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:37:23,578] DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2022-11-27 00:37:23,580] DEBUG - Starting new HTTPS connection (1): api.openai.com:443
[2022-11-27 00:37:26,633] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 460
[2022-11-27 00:37:26,634] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2624 request_id=4490f7df09a25768b7321fb9a41b513e response_code=200
[2022-11-27 00:37:26,637] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:26,637] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of 5 interesting beginner topics on where heuristics is used in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0.7, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:37:30,808] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 824
[2022-11-27 00:37:30,808] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=4028 request_id=6fd9974eb7f1d33d5104e1f7b9ad00a6 response_code=200
[2022-11-27 00:37:30,809] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:30,809] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a short, unique and interesting title relating to the theory of Heuristics is used in the context of theory of computer science programming concepts to help determine the best course of action to take when faced with a problem or decision. in the form of a video essay title without involving numbers:", "temperature": 1, "max_tokens": 20, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:37:31,764] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 309
[2022-11-27 00:37:31,765] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=816 request_id=181cc2a7c207fd0337b612f9b639cbd5 response_code=200
[2022-11-27 00:37:31,768] DEBUG - Keyword heuristics, Topics ['Heuristics is used in the context of theory of computer science programming concepts to help determine the best course of action to take when faced with a problem or decision.', 'Heuristics can be used to help simplify complex problems or make them more tractable.', 'Heuristics can be used to help generate new ideas or solutions to problems.', 'Heuristics can be used to help evaluate and compare different potential solutions to a problem.', 'Heuristics can be used to help choose between different courses of action when multiple options are available.'], Topic Heuristics: The Science of Making Decisions
[2022-11-27 00:37:31,769] INFO - topic Heuristics: The Science of Making Decisions
[2022-11-27 00:37:31,769] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:31,769] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of beginner topics relating to what is Heuristics: The Science of Making Decisions in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:37:34,530] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 539
[2022-11-27 00:37:34,531] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2620 request_id=c7336c48830e1493d6fc3cc8a159db82 response_code=200
[2022-11-27 00:37:34,531] DEBUG - topic: Heuristics: The Science of Making Decisions, sub topics What is a heuristic?
-What are some common heuristics?
-How can heuristics be used to make decisions?
-What are some benefits and drawbacks of using heuristics?
-How can heuristics be applied to computer science?
-What are some examples of heuristics in computer science?
[2022-11-27 00:37:34,531] INFO - subtopics ['What is a heuristic?', 'What are some common heuristics?', 'How can heuristics be used to make decisions?', 'What are some benefits and drawbacks of using heuristics?', 'How can heuristics be applied to computer science?', 'What are some examples of heuristics in computer science?']
[2022-11-27 00:37:34,531] DEBUG - getting summary for topic
[2022-11-27 00:37:34,531] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:34,531] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a summary for the following topic in the form of a youtube description in the context of theory of computer science programming concepts:\\n\\ntopic: Heuristics: The Science of Making Decisions\\n\\nsummary:", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:37:35,333] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 493
[2022-11-27 00:37:35,333] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=655 request_id=97434044a1aa53e3ddf1a925484a62b4 response_code=200
[2022-11-27 00:37:35,334] INFO - summary In this video, we explore the concept of heuristics, which are algorithms that help us make decisions quickly and efficiently. Heuristics can be used in a variety of programming contexts, from optimizing code to solving problems.
[2022-11-27 00:37:35,334] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:35,334] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Heuristics The Science of Making Decisions in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a heuristic?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n2.", "\\n\\n2.", "\\n\\n\\n2."], "echo": false}' message='Post details'
[2022-11-27 00:37:36,312] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 545
[2022-11-27 00:37:36,312] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=831 request_id=006281f402b21aa0c65bfe946c61759a response_code=200
[2022-11-27 00:37:36,312] DEBUG - passage length 280
[2022-11-27 00:37:36,313] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:37:36,313] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A heuristic is a technique that can help us make a decision. We might use a heuristic when we are looking for a solution to a problem. Heuristics might take a short amount of time to work, but they might also lead to a better solution than if we used a more complicated technique.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:37:39,188] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 435
[2022-11-27 00:37:39,188] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2737 request_id=b943a3edc1e1d47f5986b4fe63c030c4 response_code=200
[2022-11-27 00:37:39,189] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:39,189] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Heuristics The Science of Making Decisions in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a heuristic?\\n\\nA heuristic is a technique that can help us make a decision. We might use a heuristic when we are looking for a solution to a problem. Heuristics might take a short amount of time to work, but they might also lead to a better solution than if we were to use a more complicated technique.\\n\\n2. What are some common heuristics?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n3.", "\\n\\n3.", "\\n\\n\\n3."], "echo": false}' message='Post details'
[2022-11-27 00:37:40,196] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 692
[2022-11-27 00:37:40,197] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=860 request_id=a0eb0db0b43ec79c4e174f8be65d2b91 response_code=200
[2022-11-27 00:37:40,197] DEBUG - passage length 428
[2022-11-27 00:37:40,197] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:37:40,197] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "There are many common heuristics. One heuristic is trial and error. We might try different solutions to a problem until we find one that works. Another heuristic is brainstorming. We might think of all the different ideas that could solve the problem. We might also use heuristics when we are trying to find a solution to a problem that we have never seen before. We might look for similar problems that have been solved before.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:37:44,459] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 631
[2022-11-27 00:37:44,460] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4123 request_id=10ea453e17b22f192202be6564f4f491 response_code=200
[2022-11-27 00:37:44,460] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:44,460] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Heuristics The Science of Making Decisions in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a heuristic?\\n\\nA heuristic is a technique that can help us make a decision. We might use a heuristic when we are looking for a solution to a problem. Heuristics might take a short amount of time to work, but they might also lead to a better solution than if we were to use a more complicated technique.\\n\\n2. What are some common heuristics?\\n\\nHeuristics are methods that help us to solve problems. There are many common heuristics. One heuristic is trial and error. We might try different solutions to a problem until we find one that works. Another heuristic is brainstorming. We might think of all the different ideas that could solve the problem. We might also use heuristics when we are trying to find a solution to a problem that we have never seen before. We might look for similar problems that have been solved before.\\n\\n3. How can heuristics be used to make decisions?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n4.", "\\n\\n4.", "\\n\\n\\n4."], "echo": false}' message='Post details'
[2022-11-27 00:37:45,247] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 537
[2022-11-27 00:37:45,247] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=641 request_id=a3950ca6070fed717b153ff59f552f71 response_code=200
[2022-11-27 00:37:45,247] DEBUG - passage length 271
[2022-11-27 00:37:45,249] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:37:45,249] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "Heuristics can be used to make decisions in a number of ways. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work. Heuristics can also help us to find solutions that are likely to be correct.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:37:47,582] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 372
[2022-11-27 00:37:47,582] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=2196 request_id=360de0c3d39d3e07d406eb5d830a15c3 response_code=200
[2022-11-27 00:37:47,582] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:47,582] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Heuristics The Science of Making Decisions in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a heuristic?\\n\\nA heuristic is a technique that can help us make a decision. We might use a heuristic when we are looking for a solution to a problem. Heuristics might take a short amount of time to work, but they might also lead to a better solution than if we were to use a more complicated technique.\\n\\n2. What are some common heuristics?\\n\\nHeuristics are methods that help us to solve problems. There are many common heuristics. One heuristic is trial and error. We might try different solutions to a problem until we find one that works. Another heuristic is brainstorming. We might think of all the different ideas that could solve the problem. We might also use heuristics when we are trying to find a solution to a problem that we have never seen before. We might look for similar problems that have been solved before.\\n\\n3. How can heuristics be used to make decisions?\\n\\nHeuristics can be used to make decisions in a number of ways. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work, and are likely to be correct.\\n\\n4. What are some benefits and drawbacks of using heuristics?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n5.", "\\n\\n5.", "\\n\\n\\n5."], "echo": false}' message='Post details'
[2022-11-27 00:37:48,828] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 720
[2022-11-27 00:37:48,829] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1098 request_id=e344d3fbb344fa5b32e88a8f32ca0282 response_code=200
[2022-11-27 00:37:48,829] DEBUG - passage length 453
[2022-11-27 00:37:48,829] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:37:48,829] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "Benefits of using heuristics include the fact that they can help us to solve problems quickly. Heuristics can also help us to find solutions that are likely to work and are likely to be correct. Heuristics can be useful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics cantions might work better for certain people than for others.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:37:53,567] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 600
[2022-11-27 00:37:53,568] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4599 request_id=a639c872b57473af8cbe8c345a6b7bd7 response_code=200
[2022-11-27 00:37:53,568] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:37:53,568] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Heuristics The Science of Making Decisions in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a heuristic?\\n\\nA heuristic is a technique that can help us make a decision. We might use a heuristic when we are looking for a solution to a problem. Heuristics might take a short amount of time to work, but they might also lead to a better solution than if we were to use a more complicated technique.\\n\\n2. What are some common heuristics?\\n\\nHeuristics are methods that help us to solve problems. There are many common heuristics. One heuristic is trial and error. We might try different solutions to a problem until we find one that works. Another heuristic is brainstorming. We might think of all the different ideas that could solve the problem. We might also use heuristics when we are trying to find a solution to a problem that we have never seen before. We might look for similar problems that have been solved before.\\n\\n3. How can heuristics be used to make decisions?\\n\\nHeuristics can be used to make decisions in a number of ways. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work, and are likely to be correct.\\n\\n4. What are some benefits and drawbacks of using heuristics?\\n\\nBenefits of using heuristics include the fact that they can help us to solve problems quickly. Heuristics can also help us to find solutions that are likely to work and are likely to be correct. Heuristics can be useful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.\\n\\n5. How can heuristics be applied to computer science?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n6.", "\\n\\n6.", "\\n\\n\\n6."], "echo": false}' message='Post details'
[2022-11-27 00:37:54,607] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 732
[2022-11-27 00:37:54,607] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=891 request_id=f199d475f3b97786eb8c89873dcb1f52 response_code=200
[2022-11-27 00:37:54,607] DEBUG - passage length 465
[2022-11-27 00:37:54,607] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:37:54,607] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "Heuristics can be used to make decisions in computer science programming. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work. Heuristics can be helpful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:38:27,151] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 5397
[2022-11-27 00:38:27,151] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=32403 request_id=66b4217ec4a83f7e03a36abf60f0413e response_code=200
[2022-11-27 00:38:27,151] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:38:27,151] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of Heuristics The Science of Making Decisions in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a heuristic?\\n\\nA heuristic is a technique that can help us make a decision. We might use a heuristic when we are looking for a solution to a problem. Heuristics might take a short amount of time to work, but they might also lead to a better solution than if we were to use a more complicated technique.\\n\\n2. What are some common heuristics?\\n\\nHeuristics are methods that help us to solve problems. There are many common heuristics. One heuristic is trial and error. We might try different solutions to a problem until we find one that works. Another heuristic is brainstorming. We might think of all the different ideas that could solve the problem. We might also use heuristics when we are trying to find a solution to a problem that we have never seen before. We might look for similar problems that have been solved before.\\n\\n3. How can heuristics be used to make decisions?\\n\\nHeuristics can be used to make decisions in a number of ways. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work, and are likely to be correct.\\n\\n4. What are some benefits and drawbacks of using heuristics?\\n\\nBenefits of using heuristics include the fact that they can help us to solve problems quickly. Heuristics can also help us to find solutions that are likely to work and are likely to be correct. Heuristics can be useful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.\\n\\n5. How can heuristics be applied to computer science?\\n\\nHeuristics can be used to make decisions in computer science programming. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work. Heuristics can be helpful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others. \\n\\n\\nHeuristics help you to solve problems\\n\\nHeuristics can help you to solve problems. Heuristics can help you to solve problems that are difficult and unfamiliar. Heuristics can also help you to solve problems quickly. However, heuristics also have drawbacks. Heuristics can lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.\\n\\n\\nHeuristics are commonly used in computer science\\n\\nHeuristics can be used to make decisions in computer science programming. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work. Heuristics can be helpful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others. \\n\\n\\nHeuristics can be helpful in many situations\\n\\nHeuristics can be helpful when we are unfamiliar with the problem or the solution. Heuristics can also help us to find solutions that are likely to work. Heuristics can help us to find solutions to problems quickly. Heuristics can help you to solve problems that are difficult and unfamiliar. Heuristics can help you to solve problems. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.\\n\\n\\nHeuristics can be helpful in many situations\\n\\nHeuristics can be helpful when we are unfamiliar with the problem or the solution. Heuristics can also help us to find solutions that are likely to work. Heuristics can help us to find solutions to problems quickly. Heuristics can help you to solve problems that are difficult and unfamiliar. Heuristics can help you to solve problems. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.\\n\\n\\nHeuristics are commonly used in computer science\\n\\nHeuristics can be used to make decisions in computer science programming. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work. Heuristics can be helpful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others. \\n\\n\\nHeuristics are commonly used in computer science\\n\\nHeuristics can be used to make decisions in computer science programming. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work. Heuristics can be helpful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others. \\n\\n\\nHeuristics are commonly used in computer science\\n\\nHeuristics can be used to make decisions in computer science programming. Heuristics can help us to find solutions to problems quickly. Heuristics can also help us to find solutions that are likely to work. Heuristics can be helpful when we are unfamiliar with the problem or the solution. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others. \\n\\n\\nHeuristics can be helpful in many situations\\n\\nHeuristics can be helpful when we are unfamiliar with the problem or the solution. Heuristics can also help us to find solutions that are likely to work. Heuristics can help us to find solutions to problems quickly. Heuristics can help you to solve problems that are difficult and unfamiliar. Heuristics can help you to solve problems. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.\\n\\n\\nHeuristics can be helpful in many situations\\n\\nHeuristics can be helpful when we are unfamiliar with the problem or the solution. Heuristics can also help us to find solutions that are likely to work. Heuristics can help us to find solutions to problems quickly. Heuristics can help you to solve problems that are difficult and unfamiliar. Heuristics can help you to solve problems. However, heuristics can also lead to mistakes. Heuristics can also be subject to bias. This means that heuristics can sometimes work better for certain people than for others.\\n\\n6. What are some examples of heuristics in computer science?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n7.", "\\n\\n7.", "\\n\\n\\n7."], "echo": false}' message='Post details'
[2022-11-27 00:38:28,097] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 726
[2022-11-27 00:38:28,097] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=795 request_id=fdf663be9b95fcabe773447952d2d102 response_code=200
[2022-11-27 00:38:28,098] DEBUG - passage length 460
[2022-11-27 00:38:28,098] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:38:28,098] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "One example of a heuristic in computer science is trial and error. We might try different solutions to a problem until we find one that works. Another example of a heuristic in computer science is brainstorming. We might think of all the different ideas that could solve the problem. We might also use heuristics when we are trying to find a solution to a problem that we have never seen before. We might look for similar problems that have been solved before.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:38:34,343] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 1110
[2022-11-27 00:38:34,343] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=6105 request_id=f0faa0cbde4eb62afc0d71d84f93b07d response_code=200
[2022-11-27 00:38:34,345] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:34,503] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/playlists?part=id&id=UC_x5XG1OV2P6uZZ5FSM9Ttw&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&maxResults=2 HTTP/1.1" 200 None
[2022-11-27 00:38:34,505] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,181] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/search?part=snippet&type=video&maxResults=50&order=relevance&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&q=What%20is%20a%20heuristic?%20in%20theory%20of%20computer%20science%20programming%20concepts&publishedAfter=2000-01-01T00:00:00Z&publishedBefore=3000-01-01T00:00:00Z HTTP/1.1" 200 None
[2022-11-27 00:38:35,187] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,259] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=TNpcXITox60 HTTP/1.1" 200 None
[2022-11-27 00:38:35,262] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,322] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=FFd-pBm6lOA HTTP/1.1" 200 None
[2022-11-27 00:38:35,324] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,387] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=jJ3CV3yhajM HTTP/1.1" 200 None
[2022-11-27 00:38:35,390] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,464] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=5F9YzkpnaRw HTTP/1.1" 200 None
[2022-11-27 00:38:35,466] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,531] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=o5gP9GmOshI HTTP/1.1" 200 None
[2022-11-27 00:38:35,534] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,599] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ReFqFPJHLhA HTTP/1.1" 200 None
[2022-11-27 00:38:35,601] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,666] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=u4sMcDT5XS4 HTTP/1.1" 200 None
[2022-11-27 00:38:35,669] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,741] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=fskU0pYc7x4 HTTP/1.1" 200 None
[2022-11-27 00:38:35,743] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,803] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=eekow29FSoc HTTP/1.1" 200 None
[2022-11-27 00:38:35,805] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,866] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=EKWGGDXe5MA HTTP/1.1" 200 None
[2022-11-27 00:38:35,869] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,927] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=EwSKUzYllrc HTTP/1.1" 200 None
[2022-11-27 00:38:35,929] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:35,983] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=v2SDBbtFp3c HTTP/1.1" 200 None
[2022-11-27 00:38:35,985] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,047] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=aKYlikFAV4k HTTP/1.1" 200 None
[2022-11-27 00:38:36,051] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,107] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=CJmlP03ik5g HTTP/1.1" 200 None
[2022-11-27 00:38:36,109] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,171] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=8ekB-zqXJN8 HTTP/1.1" 200 None
[2022-11-27 00:38:36,173] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,236] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=OKscPwkgebk HTTP/1.1" 200 None
[2022-11-27 00:38:36,239] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,293] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ROUZGC5itjI HTTP/1.1" 200 None
[2022-11-27 00:38:36,295] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,358] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=PzEWHH2v3TE HTTP/1.1" 200 None
[2022-11-27 00:38:36,360] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,417] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=qeVdF2v_WEw HTTP/1.1" 200 None
[2022-11-27 00:38:36,419] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,471] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=dtGRmhZ6Cuo HTTP/1.1" 200 None
[2022-11-27 00:38:36,474] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,544] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=udTlE4Jmzgo HTTP/1.1" 200 None
[2022-11-27 00:38:36,546] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,606] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=wMcRMO9ejeM HTTP/1.1" 200 None
[2022-11-27 00:38:36,608] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,686] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=JsJvU7-80y4 HTTP/1.1" 200 None
[2022-11-27 00:38:36,688] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,743] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=FFzdXJ49KAI HTTP/1.1" 200 None
[2022-11-27 00:38:36,745] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:38:36,800] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=D6xkbGLQesk HTTP/1.1" 200 None
[2022-11-27 00:38:36,802] DEBUG - Hashtags ['#productivityguy', '#8puzzleproblem', '#aalgorithm', '#pathfinding', '#heuristic', '#p5js', '#javascript', '#gerdgigerenzer', '#heuristics', '#betterdecisions']
[2022-11-27 00:38:36,802] DEBUG - Top Hashtags ['#productivityguy', '#8puzzleproblem', '#aalgorithm', '#pathfinding', '#heuristic']
[2022-11-27 00:38:36,802] DEBUG - Tags ['heuristic technique', 'heuristic model', 'heuristic method', 'what is heuristic technique', 'heuristic technique meaning', 'heuristic technique example', 'heuristic technique sample', 'heuristic technique explained', 'heuristic technique definition', 'time management', 'productivity', 'time management apps', 'time management and productivity', 'time management skills', 'heuristic', 'algorithm', 'soma', 'cube', 'what is heuristic in ai', 'heuristic in artificial intelligence', 'informed search', 'heuristic function', 'artificial intelligence course', 'artificial intelligence lecture', 'heuristic function in artificial intelligence in telugu', 'heuristic function example', 'heuristic function 8 puzzle problem', 'heuristic function artificial intelligence', 'heuristic function for hill climbing', 'heuristic function 8 puzzle', 'ai', 'artificial intelligence', 'intelligence', 'artificial', 'heuristic search', 'heuristic search', 'jane street', 'sandor lehoczky', 'heuristics', 'biases', 'thinking fast and slow', 'heuristics', 'heuristics and biases', 'pardox of choice', 'heuristics and decision making', 'heuristic definition', 'rational choices', 'sean rife', 'libertarian', 'liberty', 'institute for humane studies', 'learn liberty', 'decision making', 'behavioral economics', 'social science', 'heuristics and biases in decision making', 'heuristics in psychology', 'availability heuristic', 'cognitive bias', 'what are heuristics', 'heuristics and biases', 'what is heuristics', 'behavioural economics heuristics', 'heuristics and metaheuritics', 'difference between heuristics and metaheuristics', 'artificial intelligence algorithms', 'java artificial intelligence algorithms', 'heuristics', 'metaheuristics', 'what are heuristics in ai', 'metaheuristics in ai explained', 'computation theory', 'information theory', 'computation', 'complexity', 'santa fe institute', 'algorithm', 'algorithms', 'complex systems', 'complexity science', 'metaheuristics', 'scheduling problem', 'combinatorial optimization', 'heuristics', 'random search', 'simulated annealing', 'local search', 'discrete optimization', 'stochastic optimization', 'tsp', 'travelling salesman problem', 'exploration', 'exploitation', 'richard', 'feynman', 'computer', 'science', 'lecture', 'heuristics', 'quantum', 'electrodynamics', 'math', 'technology', 'electronics', 'physics', 'artificial', 'intelligence', 'computers inside and out', 'microsoft research', 'science', 'gerd gigerenzer', 'heuristics', 'javascript (programming language)', 'live', 'programming', 'daniel shiffman', 'creative coding', 'p5.js', 'coding challenge', 'p5.js tutorial', 'p5js', 'javascript (programming language)', 'tutorial', 'javascript', 'algorithms', 'coding', 'challenges', 'a*', 'a* algorithm', 'a* algorithm javascript', 'a* algorithm js', 'a* pathfinding javascript', 'a* search', 'a* pathfinding', 'astar algorithm', 'a* search algorithm', 'coding train', 'the coding train', 'code challenge', 'astar search', 'astar pathfinding', 'a* coding challenge', 'pathfinding', 'heuristic', 'admissible', 'consistent', 'monotone', 'admissibility', 'consistency', 'monotonocity', 'a* search', 'manhattan distance', 'euclidean distance', 'manhattan', 'euclidean', 'search', 'graph', 'triangle inequality', 'big data', 'heuristics', 'gerd gigerenzer', 'human mind and ai', 'decision culture', 'cab 2021', 'fractalai', 'fractal ai', 'fractal analytics', 'ai', 'artificial intelligence', 'python', 'agi', 'gpt3', 'gpt 3', 'gpt-3', 'artificial cognition', 'psychology', 'philosophy', 'neuroscience', 'cognitive neuroscience', 'futurism', 'humanity', 'ethics', 'alignment', 'control problem', 'a star algorithm in artificial intelligence', 'a star search example', 'a star search algorithm example', 'heuristic', 'search', 'science technology singularity transhumanism adam ford future humanity+ future by design science', 'technology & the future', 'agi-10', 'agi', 'artificial general intelligence', 'ai', 'ai', 'game playing in ai', 'game playing in ai', 'minimax algo in ai', 'alpha beta pruning in ai', 'learn ai', 'easy learn ai', 'artificial intelligence', 'game playing in artificial intelligence', 'minimax algo in ai', 'examples of game playing algos', 'game playing', 'alpha beta pruning', 'alpha beta cutoff', 'minimax search tree', 'game', 'playing', 'game playing in artificial intelligence in english', 'game playing in artificial intelligence', 'artificial intelligence', 'game tree', 'game playing in ai', 'big o notation', 'big o notation tutorial', 'big o notation explained', 'time complexity', 'time complexity tutorial', 'time complexity explained', 'big o notation python', 'big o notation java']
[2022-11-27 00:38:36,803] DEBUG - Top Tags ['heuristics', 'ai', 'artificial intelligence', 'heuristic', 'game playing in ai', 'algorithm', 'intelligence', 'artificial', 'heuristic search', 'heuristics and biases', 'metaheuristics', 'algorithms', 'science', 'gerd gigerenzer']
[2022-11-27 00:38:47,443] INFO - processing 109 tts sections
[2022-11-27 00:38:47,667] CRITICAL - Failed to generate audio
[2022-11-27 00:38:47,667] INFO - Getting video script.
[2022-11-27 00:38:47,669] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:38:47,669] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of unique and interesting keywords relating to theory of computer science programming concepts:\\n\\n-", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:38:49,905] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 453
[2022-11-27 00:38:49,905] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2095 request_id=3c6cd8bbb3277e60185b9dcaa3ebdc68 response_code=200
[2022-11-27 00:38:49,906] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:38:49,906] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of 5 interesting beginner topics on where level language is used in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0.7, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:38:53,277] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 592
[2022-11-27 00:38:53,278] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=3232 request_id=dec7faed07432f5387257bf31bc738b4 response_code=200
[2022-11-27 00:38:53,278] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:38:53,278] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a short, unique and interesting title relating to the theory of What is a high in the form of a video essay title without involving numbers:", "temperature": 1, "max_tokens": 20, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:38:54,204] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 288
[2022-11-27 00:38:54,204] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=785 request_id=5f6ae01db79919c065932942f716c21b response_code=200
[2022-11-27 00:38:54,228] DEBUG - Keyword level language, Topics ['Theory of computer science programming concepts: an introduction', 'What is a high', 'level programming language?', 'What are the benefits of using a high', 'level programming language?', 'What are some of the most popular high', 'level programming languages?', 'What are the differences between high', 'level and low', 'level programming languages?'], Topic How to get high on life
[2022-11-27 00:38:54,228] INFO - topic How to get high on life
[2022-11-27 00:38:54,228] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:38:54,228] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of beginner topics relating to what is How to get high on life in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:39:02,974] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 1073
[2022-11-27 00:39:02,974] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=8604 request_id=130547dd5ee513840cadfce019993304 response_code=200
[2022-11-27 00:39:02,975] DEBUG - topic: How to get high on life, sub topics What is a computer?
-What is a program?
-What is a programming language?
-What are the basic concepts of programming?
-What is a software development kit?
-What is an IDE?
-What is a compiler?
-What is a linker?
-What is an interpreter?
-What is a virtual machine?
-What is a bytecode?
-What is a script?
-What is an algorithm?
-What is a data structure?
-What is a file?
-What is a stream?
-What is a process?
-What is a thread?
-What is a task?
-What is an event?
-What is an exception?
-What is an error?
-What is a bug?
-What is a feature?
-What is a requirement?
-What is a design?
-What is a test?
-What is a user?
-What is a customer?
-What is a client?
-What is a server?
-What is a network?
-What is the internet?
-What is the world wide web?
-What is a website?

[2022-11-27 00:39:02,975] INFO - subtopics ['What is a computer?', 'What is a program?', 'What is a programming language?', 'What are the basic concepts of programming?', 'What is a software development kit?', 'What is an IDE?', 'What is a compiler?', 'What is a linker?', 'What is an interpreter?', 'What is a virtual machine?', 'What is a bytecode?', 'What is a script?', 'What is an algorithm?', 'What is a data structure?', 'What is a file?', 'What is a stream?', 'What is a process?', 'What is a thread?', 'What is a task?', 'What is an event?', 'What is an exception?', 'What is an error?', 'What is a bug?', 'What is a feature?', 'What is a requirement?', 'What is a design?', 'What is a test?', 'What is a user?', 'What is a customer?', 'What is a client?', 'What is a server?', 'What is a network?', 'What is the internet?', 'What is the world wide web?', 'What is a website?']
[2022-11-27 00:39:02,975] CRITICAL - Failed to generate video script
[2022-11-27 00:39:02,975] INFO - Getting video script.
[2022-11-27 00:39:02,975] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:02,975] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of unique and interesting keywords relating to theory of computer science programming concepts:\\n\\n-", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:39:05,042] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 409
[2022-11-27 00:39:05,043] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1927 request_id=aa8b4257242cd348c0a6e726f8cffcf0 response_code=200
[2022-11-27 00:39:05,043] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:05,043] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of 5 interesting beginner topics on where Complexity is used in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0.7, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:39:06,883] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 406
[2022-11-27 00:39:06,884] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1699 request_id=6ddf2a6aa09d31dfbde94ffb267297f7 response_code=200
[2022-11-27 00:39:06,884] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:06,884] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a short, unique and interesting title relating to the theory of Formal Languages and Automata in the form of a video essay title without involving numbers:", "temperature": 1, "max_tokens": 20, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:39:08,009] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 308
[2022-11-27 00:39:08,009] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=984 request_id=37d695618fd8885c4c4b16dc59f8e7e8 response_code=200
[2022-11-27 00:39:08,044] DEBUG - Keyword Complexity, Topics ['Theory of Computation', 'Formal Languages and Automata', 'Computational Complexity', ' Algorithms and Data Structures', 'Programming Language Theory'], Topic The Magic of Formal Languages and Automata
[2022-11-27 00:39:08,044] INFO - topic The Magic of Formal Languages and Automata
[2022-11-27 00:39:08,044] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:08,044] DEBUG - api_version=None data='{"model": "text-davinci-002", "prompt": "Write a list of beginner topics relating to what is The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts:\\n\\n-", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:39:11,004] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 624
[2022-11-27 00:39:11,004] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2816 request_id=cd2f5af281a207f22de9f1d4eb4f7e24 response_code=200
[2022-11-27 00:39:11,004] DEBUG - topic: The Magic of Formal Languages and Automata, sub topics What is a formal language?
-What is an automaton?
-What are the different types of formal languages?
-What are the different types of automata?
-What are the properties of formal languages?
-What are the properties of automata?
-What is the relationship between formal languages and automata?
-What are some applications of formal languages and automata?
[2022-11-27 00:39:11,005] INFO - subtopics ['What is a formal language?', 'What is an automaton?', 'What are the different types of formal languages?', 'What are the different types of automata?', 'What are the properties of formal languages?', 'What are the properties of automata?', 'What is the relationship between formal languages and automata?', 'What are some applications of formal languages and automata?']
[2022-11-27 00:39:11,005] DEBUG - getting summary for topic
[2022-11-27 00:39:11,005] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:11,005] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Write a summary for the following topic in the form of a youtube description in the context of theory of computer science programming concepts:\\n\\ntopic: The Magic of Formal Languages and Automata\\n\\nsummary:", "temperature": 0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": "", "echo": false}' message='Post details'
[2022-11-27 00:39:11,943] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 505
[2022-11-27 00:39:11,943] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=789 request_id=d95b49094c211a1db33d0cece6e3be37 response_code=200
[2022-11-27 00:39:11,944] INFO - summary In this video, we explore the magic of formal languages and automata. We'll see how they can be used to express complex algorithms and problems in a concise and unambiguous way, and how they can be used to solve problems in a systematic way.
[2022-11-27 00:39:11,944] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:11,944] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n2.", "\\n\\n2.", "\\n\\n\\n2."], "echo": false}' message='Post details'
[2022-11-27 00:39:12,700] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 443
[2022-11-27 00:39:12,701] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=609 request_id=a5582b1729a57879fe01727e5e4facc2 response_code=200
[2022-11-27 00:39:12,701] DEBUG - passage length 181
[2022-11-27 00:39:12,701] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:12,701] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "A formal language is a type of language that uses symbols that represent concepts not just words. Formal languages can be used for theorem proving and for writing computer programs.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:14,572] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 328
[2022-11-27 00:39:14,572] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=1731 request_id=10f501c16a794330f8e0b01f9d00954f response_code=200
[2022-11-27 00:39:14,572] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:14,572] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\nA formal language is a type of language that uses symbols that represent concepts not just words.\\nFormal languages can be used for theorem proving and for writing computer programs.\\n\\n2. What is an automaton?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n3.", "\\n\\n3.", "\\n\\n\\n3."], "echo": false}' message='Post details'
[2022-11-27 00:39:14,981] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 321
[2022-11-27 00:39:14,981] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=253 request_id=e007329cefc7a51ed4d127797ab4aa5e response_code=200
[2022-11-27 00:39:14,982] DEBUG - passage length 58
[2022-11-27 00:39:14,982] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:14,982] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "An automaton is a machine that can do tasks automatically.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:15,822] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 202
[2022-11-27 00:39:15,822] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=700 request_id=7127b394393e8a608c46b90f130b92be response_code=200
[2022-11-27 00:39:15,822] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:15,823] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\nA formal language is a type of language that uses symbols that represent concepts not just words.\\nFormal languages can be used for theorem proving and for writing computer programs.\\n\\n2. What is an automaton?\\n\\nAn automaton is a machine that can do tasks automatically\\n\\n3. What are the different types of formal languages?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n4.", "\\n\\n4.", "\\n\\n\\n4."], "echo": false}' message='Post details'
[2022-11-27 00:39:16,996] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 845
[2022-11-27 00:39:16,996] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1026 request_id=c6ef0a9aea2e78be49afc25916b39fdb response_code=200
[2022-11-27 00:39:16,996] DEBUG - passage length 572
[2022-11-27 00:39:16,997] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:16,997] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "There are three types of formal languages: first-order languages, second-order languages, and higher-order languages.  First-order languages are simple, and they only have one type of symbol, called the denotator. Denotators are used to represent the operations that a language can perform.  Second-order languages are a bit more complex, and they have two types of symbols: the applicator and the result. Applicators are used to denote the operations that a language can perform oninputs, and the result is the result of applying the applicator to the input.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:21,776] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 708
[2022-11-27 00:39:21,777] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4640 request_id=8370b0d581dc4c11b00ac71abd1f7015 response_code=200
[2022-11-27 00:39:21,777] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:21,777] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\nA formal language is a type of language that uses symbols that represent concepts not just words.\\nFormal languages can be used for theorem proving and for writing computer programs.\\n\\n2. What is an automaton?\\n\\nAn automaton is a machine that can do tasks automatically\\n\\n3. What are the different types of formal languages?\\n\\nThere are three types of formal languages: firstorder languages, secondorder languages, and higherorder languages.  Firstorder languages are simple, and they only have one type of symbol, called the denotator. Denotators are used to represent the operations that a language can perform.  Secondorder languages are a bit more complex, and they have two types of symbols: the applicator and the result. Applicators are used to denote the operations that a language can perform on inputs, and the result is the result of applying the applicator to the input.\\n\\n4. What are the different types of automata?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n5.", "\\n\\n5.", "\\n\\n\\n5."], "echo": false}' message='Post details'
[2022-11-27 00:39:22,687] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 650
[2022-11-27 00:39:22,687] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=765 request_id=774e492350d174ff1fe1c451251f3f78 response_code=200
[2022-11-27 00:39:22,687] DEBUG - passage length 386
[2022-11-27 00:39:22,687] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:22,687] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "There are three types of automata: deterministic automata, random machines, and transitional automata. Deterministic automata are machines that always produce the same output given the same inputs. Random machines are machines that can produce a random output given the same inputs. Transitional automata are machines that can change between two different outputs given the same inputs.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:27,383] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 533
[2022-11-27 00:39:27,383] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4546 request_id=a24d783dfb66dcfd0a146d20d012dba4 response_code=200
[2022-11-27 00:39:27,384] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:27,384] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\nA formal language is a type of language that uses symbols that represent concepts not just words.\\nFormal languages can be used for theorem proving and for writing computer programs.\\n\\n2. What is an automaton?\\n\\nAn automaton is a machine that can do tasks automatically\\n\\n3. What are the different types of formal languages?\\n\\nThere are three types of formal languages: firstorder languages, secondorder languages, and higherorder languages.  Firstorder languages are simple, and they only have one type of symbol, called the denotator. Denotators are used to represent the operations that a language can perform.  Secondorder languages are a bit more complex, and they have two types of symbols: the applicator and the result. Applicators are used to denote the operations that a language can perform on inputs, and the result is the result of applying the applicator to the input.\\n\\n4. What are the different types of automata?\\n\\nThere are three types of automata: deterministic automata, random machines, and transitional automata. Deterministic automata are machines that always produce the same output given the same inputs. Random machines are machines that can produce a random output given the same inputs. Transitional automata are machines that can change between two different outputs given the same input.\\n\\n5. What are the properties of formal languages?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n6.", "\\n\\n6.", "\\n\\n\\n6."], "echo": false}' message='Post details'
[2022-11-27 00:39:28,915] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 862
[2022-11-27 00:39:28,916] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1385 request_id=4ba16e8235cf4fb918c850233aa2ac84 response_code=200
[2022-11-27 00:39:28,916] DEBUG - passage length 592
[2022-11-27 00:39:28,916] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:28,916] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The properties of formal languages include: 1. Formal languages are unambiguous. This means that every symbol in a formal language means the same thing. 2. Formal languages are context-free. This means that every symbol in a formal language can be used in any place in the language, and the meaning of the symbol is the same in every place. 3. Formal languages are Turing-complete. This means that a formal language is able to express all the possible computable operations.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:34,025] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 628
[2022-11-27 00:39:34,025] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4968 request_id=a578c7d8ca1f87d3d7a39575ba230f65 response_code=200
[2022-11-27 00:39:34,025] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:34,026] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\nA formal language is a type of language that uses symbols that represent concepts not just words.\\nFormal languages can be used for theorem proving and for writing computer programs.\\n\\n2. What is an automaton?\\n\\nAn automaton is a machine that can do tasks automatically\\n\\n3. What are the different types of formal languages?\\n\\nThere are three types of formal languages: firstorder languages, secondorder languages, and higherorder languages.  Firstorder languages are simple, and they only have one type of symbol, called the denotator. Denotators are used to represent the operations that a language can perform.  Secondorder languages are a bit more complex, and they have two types of symbols: the applicator and the result. Applicators are used to denote the operations that a language can perform on inputs, and the result is the result of applying the applicator to the input.\\n\\n4. What are the different types of automata?\\n\\nThere are three types of automata: deterministic automata, random machines, and transitional automata. Deterministic automata are machines that always produce the same output given the same inputs. Random machines are machines that can produce a random output given the same inputs. Transitional automata are machines that can change between two different outputs given the same input.\\n\\n5. What are the properties of formal languages?\\n\\nThe properties of formal languages include:\\n\\n* Formal languages are unambiguous. This means that every symbol in a formal language means the same thing.\\n\\n* Formal languages are contextfree. This means that every symbol in a formal language can be used in any place in the language, and the meaning of the symbol is the same in every place.\\n\\n* Formal languages are Turingcomplete. This means that a formal language is able to express all the possible computable operations.\\n\\n6. What are the properties of automata?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n7.", "\\n\\n7.", "\\n\\n\\n7."], "echo": false}' message='Post details'
[2022-11-27 00:39:34,900] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 615
[2022-11-27 00:39:34,901] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=722 request_id=b8db346f01f07538e1f2820d37d689b0 response_code=200
[2022-11-27 00:39:34,901] DEBUG - passage length 345
[2022-11-27 00:39:34,901] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:34,901] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The properties of automata include:  * Automata are Turingcomplete. This means that a machine that is an automaton is able to express all the possible computable operations.  * Automata can be configured in different ways, so they can perform different tasks.  * Automata can be written in a formal language, which allows for easier programming.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:39,155] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 501
[2022-11-27 00:39:39,155] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4115 request_id=99f7a4ab00f9f4e3dc638b0aafbc485c response_code=200
[2022-11-27 00:39:39,156] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:39,156] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\nA formal language is a type of language that uses symbols that represent concepts not just words.\\nFormal languages can be used for theorem proving and for writing computer programs.\\n\\n2. What is an automaton?\\n\\nAn automaton is a machine that can do tasks automatically\\n\\n3. What are the different types of formal languages?\\n\\nThere are three types of formal languages: firstorder languages, secondorder languages, and higherorder languages.  Firstorder languages are simple, and they only have one type of symbol, called the denotator. Denotators are used to represent the operations that a language can perform.  Secondorder languages are a bit more complex, and they have two types of symbols: the applicator and the result. Applicators are used to denote the operations that a language can perform on inputs, and the result is the result of applying the applicator to the input.\\n\\n4. What are the different types of automata?\\n\\nThere are three types of automata: deterministic automata, random machines, and transitional automata. Deterministic automata are machines that always produce the same output given the same inputs. Random machines are machines that can produce a random output given the same inputs. Transitional automata are machines that can change between two different outputs given the same input.\\n\\n5. What are the properties of formal languages?\\n\\nThe properties of formal languages include:\\n\\n* Formal languages are unambiguous. This means that every symbol in a formal language means the same thing.\\n\\n* Formal languages are contextfree. This means that every symbol in a formal language can be used in any place in the language, and the meaning of the symbol is the same in every place.\\n\\n* Formal languages are Turingcomplete. This means that a formal language is able to express all the possible computable operations.\\n\\n6. What are the properties of automata?\\n\\nThe properties of automata include:\\n\\n* Automata are Turingcomplete.\\nThis means that a machine that is an automaton is able to express all the possible computable operations.\\n* Automata can be configured in different ways so that they can perform different tasks.\\n* Automata can be written in a formal language, which allows for easier programming.\\n\\n7. What is the relationship between formal languages and automata?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n8.", "\\n\\n8.", "\\n\\n\\n8."], "echo": false}' message='Post details'
[2022-11-27 00:39:39,602] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 441
[2022-11-27 00:39:39,602] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=297 request_id=c142c5554f2647835e207d08ca43dd2c response_code=200
[2022-11-27 00:39:39,602] DEBUG - passage length 179
[2022-11-27 00:39:39,602] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:39,602] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The relationship between formal languages and automata is that formal languages are used to write automata. Automata are used to understand and perform tasks in a formal language.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:42,940] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 400 212
[2022-11-27 00:39:42,940] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=3197 request_id=1ab2d1d02780d97be877078601e149e7 response_code=400
[2022-11-27 00:39:42,941] INFO - error_code=None error_message='Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.' error_param=None error_type=invalid_edit message='OpenAI API error received' stream_error=False
[2022-11-27 00:39:42,941] DEBUG - [Edit/Openai] Rate limited retrying in 7s
[2022-11-27 00:39:49,953] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:49,953] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "The relationship between formal languages and automata is that formal languages are used to write automata. Automata are used to understand and perform tasks in a formal language.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:54,834] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 611
[2022-11-27 00:39:54,834] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=4741 request_id=52f4f198b0fbb1e4947a10b8cf455096 response_code=200
[2022-11-27 00:39:54,834] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
[2022-11-27 00:39:54,835] DEBUG - api_version=None data='{"model": "text-curie-001", "prompt": "Expand greatly upon the topic of The Magic of Formal Languages and Automata in the context of theory of computer science programming concepts summarised for a 9th grader:\\n\\n1. What is a formal language?\\n\\nA formal language is a type of language that uses symbols that represent concepts not just words.\\nFormal languages can be used for theorem proving and for writing computer programs.\\n\\n2. What is an automaton?\\n\\nAn automaton is a machine that can do tasks automatically\\n\\n3. What are the different types of formal languages?\\n\\nThere are three types of formal languages: firstorder languages, secondorder languages, and higherorder languages.  Firstorder languages are simple, and they only have one type of symbol, called the denotator. Denotators are used to represent the operations that a language can perform.  Secondorder languages are a bit more complex, and they have two types of symbols: the applicator and the result. Applicators are used to denote the operations that a language can perform on inputs, and the result is the result of applying the applicator to the input.\\n\\n4. What are the different types of automata?\\n\\nThere are three types of automata: deterministic automata, random machines, and transitional automata. Deterministic automata are machines that always produce the same output given the same inputs. Random machines are machines that can produce a random output given the same inputs. Transitional automata are machines that can change between two different outputs given the same input.\\n\\n5. What are the properties of formal languages?\\n\\nThe properties of formal languages include:\\n\\n* Formal languages are unambiguous. This means that every symbol in a formal language means the same thing.\\n\\n* Formal languages are contextfree. This means that every symbol in a formal language can be used in any place in the language, and the meaning of the symbol is the same in every place.\\n\\n* Formal languages are Turingcomplete. This means that a formal language is able to express all the possible computable operations.\\n\\n6. What are the properties of automata?\\n\\nThe properties of automata include:\\n\\n* Automata are Turingcomplete.\\nThis means that a machine that is an automaton is able to express all the possible computable operations.\\n* Automata can be configured in different ways so that they can perform different tasks.\\n* Automata can be written in a formal language, which allows for easier programming.\\n\\n7. What is the relationship between formal languages and automata?\\n\\nThe relationship between formal languages and automata is that formal languages are used to write automata.\\nAutomata are used to understand and perform tasks in a formal language.\\nFormal language\\n\\n# Alphabets\\n# Strings\\n# Languages\\n\\nAutomata\\n\\n# Finite Automata (FA)\\n# Nondeterministic Finite Automata(NFA)\\n# Deterministic Finite Automata (DFA)\\n# Nondeterministic Pushdown Automata (NPDA)\\n# Deterministic Pushdown Automata (DPDA)\\n# Turing Machines\\n\\n8. What are some applications of formal languages and automata?\\n\\n", "temperature": 1, "max_tokens": 128, "top_p": 1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "stop": ["\\n9.", "\\n\\n9.", "\\n\\n\\n9."], "echo": false}' message='Post details'
[2022-11-27 00:39:55,217] DEBUG - https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 397
[2022-11-27 00:39:55,218] INFO - message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=236 request_id=428a4ab08045959809af32e3c25626ff response_code=200
[2022-11-27 00:39:55,218] DEBUG - passage length 135
[2022-11-27 00:39:55,218] INFO - message='Request to OpenAI API' method=post path=https://api.openai.com/v1/edits
[2022-11-27 00:39:55,218] DEBUG - api_version=None data='{"model": "text-davinci-edit-001", "input": "Some applications of formal languages and automata include theorem proving, computer program drafting, and natural language processing.", "instruction": "Replace all non-characters with their spoken counterpart. And fix grammar. And also change all numbered lists to comma seperated lists", "temperature": 0.7, "top_p": 1}' message='Post details'
[2022-11-27 00:39:56,800] DEBUG - https://api.openai.com:443 "POST /v1/edits HTTP/1.1" 200 280
[2022-11-27 00:39:56,800] INFO - message='OpenAI API response' path=https://api.openai.com/v1/edits processing_ms=1444 request_id=c7958b6f250819d6aeb8b2250a58078b response_code=200
[2022-11-27 00:39:56,801] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:56,946] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/playlists?part=id&id=UC_x5XG1OV2P6uZZ5FSM9Ttw&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&maxResults=2 HTTP/1.1" 200 None
[2022-11-27 00:39:56,949] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:57,593] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/search?part=snippet&type=video&maxResults=50&order=relevance&key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&q=What%20is%20a%20formal%20language?%20in%20theory%20of%20computer%20science%20programming%20concepts&publishedAfter=2000-01-01T00:00:00Z&publishedBefore=3000-01-01T00:00:00Z HTTP/1.1" 200 None
[2022-11-27 00:39:57,597] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:57,650] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=0-tKGpxWvdw HTTP/1.1" 200 None
[2022-11-27 00:39:57,652] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:57,717] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=VnMGOSDkEx4 HTTP/1.1" 200 None
[2022-11-27 00:39:57,719] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:57,780] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=iVZDqRQiPMo HTTP/1.1" 200 None
[2022-11-27 00:39:57,783] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:57,845] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ZA3GYMWke68 HTTP/1.1" 200 None
[2022-11-27 00:39:57,850] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:57,904] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=fp0RKpQHBVw HTTP/1.1" 200 None
[2022-11-27 00:39:57,906] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:57,962] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=i6JhheV01dU HTTP/1.1" 200 None
[2022-11-27 00:39:57,966] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,025] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ixe99Uoju7U HTTP/1.1" 200 None
[2022-11-27 00:39:58,027] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,095] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=sD9eIQRn6mk HTTP/1.1" 200 None
[2022-11-27 00:39:58,098] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,179] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=OS33r2Fk8YQ HTTP/1.1" 200 None
[2022-11-27 00:39:58,181] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,240] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=aoUEXRlvmxc HTTP/1.1" 200 None
[2022-11-27 00:39:58,243] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,299] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=BEiWsKutaY0 HTTP/1.1" 200 None
[2022-11-27 00:39:58,303] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,360] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=Sg4U4r_AgJU HTTP/1.1" 200 None
[2022-11-27 00:39:58,362] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,434] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=Ga_TmKyxve8 HTTP/1.1" 200 None
[2022-11-27 00:39:58,437] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,514] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=V19S3Mqfrzo HTTP/1.1" 200 None
[2022-11-27 00:39:58,517] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,570] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=SzJ46YA_RaA HTTP/1.1" 200 None
[2022-11-27 00:39:58,572] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,629] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=HexdsOQyLVA HTTP/1.1" 200 None
[2022-11-27 00:39:58,633] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,700] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=SFnCu7KD1iQ HTTP/1.1" 200 None
[2022-11-27 00:39:58,703] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,771] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=WQ8bJooiEeQ HTTP/1.1" 200 None
[2022-11-27 00:39:58,774] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,827] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=U-rg4nHeYiw HTTP/1.1" 200 None
[2022-11-27 00:39:58,829] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,885] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=QOhmn8QwIOs HTTP/1.1" 200 None
[2022-11-27 00:39:58,887] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:58,944] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=5Jd54dxQ1_Q HTTP/1.1" 200 None
[2022-11-27 00:39:58,947] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:59,011] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=_ds04m7YjwU HTTP/1.1" 200 None
[2022-11-27 00:39:59,013] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:59,072] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=LYNAmFplhuM HTTP/1.1" 200 None
[2022-11-27 00:39:59,074] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:59,137] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=O9Q_eRlJKhY HTTP/1.1" 200 None
[2022-11-27 00:39:59,139] DEBUG - Starting new HTTPS connection (1): www.googleapis.com:443
[2022-11-27 00:39:59,193] DEBUG - https://www.googleapis.com:443 "GET /youtube/v3/videos?key=AIzaSyDfv2ISoNjVh2oX2JRJUQ1loS-voHH3GlI&fields=items(snippet(description,tags))&part=snippet&id=ejXgLRSIxsA HTTP/1.1" 200 None
[2022-11-27 00:39:59,195] DEBUG - Hashtags ['#knowledgegate', '#gate', '#sanchitjain', '#call_9821876104', '#gate', '#ntaugcnet', '#knowledgegate', '#gate', '#sanchitjain', '#theoryofcomputation', '#automatatheory', '#tocbygatesmashers', '#theoryofcomputation', '#automatatheory', '#tocbygatesmashers', '#computer', '#science', '#domainofscience', '#introductiontoflat', '#toc', '#formallanguagesandautomatatheory', '#theoryofcomputation', '#introductiontoformallanguagesandautomatatheory', '#flat', '#formal_language_and_automata_theory', '#theory_of_computation', '#compilerdesignbyneso', '#compilerdesign', '#formalgrammars', '#theoryofcomputation', '#automatatheory', '#tocbygatesmashers', '#learningoutcomesautomatatheory', '#bscsgraduatesattributes', '#programmingdiscretestructuresalgorithms', '#chedmemorandumorder25', '#bs', '#additionofsignednumbers', '#additiveinverse', '#absolutevalue', '#setz', '#nicholasbourbaki', '#setnotation', '#rostermethod', '#mdas', '#pemdas', '#exponents', '#parenthesis', '#groupingsymbols', '#linearequations', '#gaussianelimination', '#johanncarlfriedrichgauss', '#operationsonintegers', '#operationsonfractions', '#leastcommondenominator', '#thematrixseries', '#easymath', '#maamcarol', '#matrixseries', '#matrix', '#matrix1', '#matrix2', '#matrix3', '#addition', '#subtraction', '#scalarmultiplication', '#matrixmultiplication', '#operationsonmatrices', '#additionofsignednumbers', '#multiplicationofsignednumbers', '#integeroperations', '#series', '#angmathatangbatas', '#mean', '#median', '#mode', '#spreadsheetshortcuts', '#excelformula', '#sorting', '#mathematicalinduction', '#boardexamreview', '#entranceexamreview', '#jobinterview', '#collegeentranceexamreview', '#seniorhighschoolentranceexamreview', '#discretestructures', '#discretestructures1', '#discretemathematics', '#computerscience', '#mdasrule', '#math', '#pemdasrule']
[2022-11-27 00:39:59,195] DEBUG - Top Hashtags ['#theoryofcomputation', '#gate', '#automatatheory', '#tocbygatesmashers', '#knowledgegate']
[2022-11-27 00:39:59,195] DEBUG - Tags ['formal language theory', 'formal language', 'flt', 'linguistics', 'language', 'grammar', 'chomsky hierarchy', 'lesson', 'math', 'mathematics', 'complexity', 'set theory', 'set', 'computer science', 'csfieldguide', 'formal languages', 'computer', 'science', 'automata', 'theory of computation', 'language', 'computer science lecture', 'computer science lecture in hindi', 'cse gate lectures', 'gate lectures for computer science in hindi', 'sanchit jain', 'knowledge gate', 'ugc net computer science and applications', 'gate toc lectures', 'gate cse toc', 'toc lecture in hindi', 'toc lecture video', 'automata theory', 'automata theory lecture', 'theory of computation knowledge gate', 'formal language', 'input alphabet', 'theory of formal language', 'programming languages', 'web browser', 'string patterns', 'lexical analysis', 'parsing', 'interpreting', 'automata and formal languages', 'formal languages and automata theory lectures', 'introduction to formal languages', 'formal language automata theory lecture', 'formal languages and automata theory', 'formal language', 'theory of automata and formal languages', 'formal language and automata theory', 'automata theory and formal languages', 'introduction to automata theory', 'formal language automata theory', 'automata languages and computation', 'formal languages', 'automata theory', 'theory of automata', 'sanchit jain', 'theory of computation', 'gate cse lectures', 'gate computer science lectures', 'knowledge gate', 'computer science lecture', 'gate lectures for computer science in hindi', 'ugc net computer science and applications', 'gate toc lectures', 'gate cse toc', 'toc lecture in hindi', 'toc lecture video', 'automata theory', 'automata theory lecture', 'automata theory lecture nptel', 'theory of computation in hindi', 'theory of computation knowledge gate', 'formal language', 'tofl', 'basics of toc', 'automata', 'programming', 'use of automata', 'automata theory', 'automata theory tutorial', 'automata', 'automata in toc', 'automata and formal languages', 'theory of automata pdf', 'theory of computation', 'automata theory', 'automata', 'fsm', 'finite automata', 'dfa', 'deterministic finite automata', 'nfa', 'moore machine', 'mealy machine', 'definition of dfa', 'tuples', 'initial state', 'start state', 'final states', 'accepting states', 'transition function', 'fsm lecture', 'toc', 'toc lectures', 'automata lectures', 'automata theory lectures', 'the university of nottingham', 'nottingham university', 'notts uni', 'uni of notts', 'higher education', 'russell group', 'learn', 'study', 'experience', 'professor brian kernighan', 'princeton university', 'school of computer science', 'language design', 'computer science', 'language', 'computers', 'computerphile', 'computer', 'science', 'brian kernighan (computer scientist)', 'unix (operating system)', 'software (industry)', 'university of nottingham', 'bwk', 'introduction to formal languages and automata theory', 'toc free course', 'toc full course', 'theory of computation full course', 'flat course full', 'flat course for beginners', 'flat course for gate', 'toc for gate', 'gate cse toc course', 'learning monkey formal languages and automata theory', 'learning monkey gate toc', 'gate cse toc', 'toc introduction', 'toc gate', 'toc ugc net', 'toc languages', 'automata', 'what is language in toc', 'what is grammar toc', 'automata introduction', 'what is theory of computation', 'toc', 'automata theory', 'automata theory tutorial', 'types of automata', 'theory of computation', 'automata theory', 'recursively enumerable sets and turing machines undecidability', 'regular languages and finite automata context free languages and push down automata', 'gate computer scince', 'deterministic finite automaton', 'computers', 'science', 'computer science', 'machine learning', 'explainer', 'animation', 'artificial intelligence', 'software engineering', 'neural networks', 'scicomm', 'stem', 'cpu', 'alan turing', 'information theory', 'cryptography', 'big data', 'supercomputing', 'robots', '#flat', '#formal language and automata theory', 'introduction to formal languages and automata theory.', 'theory of computation & automata theory', 'formal languages and automata theory', 'toc(theory of computation)', '#introductiontoflat', '#toc(theoryofcomputation) #formallanguagesandautomatatheory', '#theoryofcomputation&automatatheory', '#introductiontoformallanguagesandautomatatheory', '#flat', '#formal_language_and_automata_theory', '#theory_of_computation', 'sundeep', 'saradhi', 'kanthety', 'automata theory', 'theory of computation', 'automata', 'abstract machine', 'mathematical model', 'applications of automata theory', 'states', 'finite automata', 'nfa', 'dfa', 'complexity', 'computations', 'formal langugaes', 'grammar', 'string', 'language', 'alphabet', 'symbols', 'transition table', 'transition diagram', 'formal grammars', 'tuples of formal grammars', 'noam chomsky', 'formal grammar compiler design', 'compiler design formal grammars', 'introduction to formal grammars', 'formal grammar introduction', 'what is a formal language?', 'how does rule induction work?', 'discrete mathematics', 'regular languages and finite automata', 'lecture', 'lecture course', 'university of cambridge lecture course', 'university of cambridge computer laboratory', 'university of cambridge department of computer science and technology', 'frank stajano university of cambridge lecture course', 's21e01-1', 'regular grammar', 'grammar', 'regular grammar in theory of computation', 'regular grammar in automata', 'regular grammar in toc', 'regular grammar types', 'grammar in automata', 'grammar in theory of computation', 'right linear grammar', 'left linear grammar', 'regular grammar example', 'toc', 'toc lectures', 'automata', 'automata theory', 'gate cse lectures', 'theory of computation', 'automata lectures', 'automata theory lectures', 'computer science lectures', 'elearning', 'grammar toc', 'engineering lectures', 'automata', 'gramamr', 'langauge', 'theory of computation', 'automata theory', 'formal languages', 'fromal grammar', 'chomsky hierarchy', 'theory of computer science', 'language opeartions', 'finite automata', 'fa', 'push down automata', 'pda', 'turing machine', 'tm', 'linear bounded automata', 'lba', 'regular language', 'context free language', 'context sensitive language', 'recursively enumerable language', 'regular grammar', 'context free grammar', 'context sensitive grammar', 'phrase structured grammar', 'unrestricted grammar', 'board exam review', 'entrance exam review', 'job interview', 'college entrance exam review', 'senior high school entrance exam review', 'discrete structures 1', 'discrete mathematics', 'computer science', 'easymath', 'grammar', 'regular grammar', 'derivations', 'derivations from a grammar', 'grammar derivations', 'regular grammar derivation', 'regular grammar language', 'grammar language', 'language of grammar', 'toc', 'toc lectures', 'automata', 'automata lectures', 'automata theory', 'automata theory lectures', 'theory of computation', 'theory of computation lectures', 'gate cse lectures', 'gate computer science', 'grammar toc', 'strings generated from a grammar', 'language generated from a grammar', 'computer science lectures']
[2022-11-27 00:39:59,197] DEBUG - Top Tags ['automata theory', 'automata', 'theory of computation', 'formal language', 'language', 'grammar', 'computer science', 'toc', 'formal languages', 'science', 'gate cse toc', 'gate cse lectures', 'finite automata', 'toc lectures', 'automata lectures']
[2022-11-27 00:40:09,863] INFO - processing 34 tts sections
[2022-11-27 00:40:09,864] DEBUG - Text-to-speech: What is a formal language?
[2022-11-27 00:40:09,864] DEBUG - [#1] Subsection: What is a formal language?
[2022-11-27 00:40:28,289] DEBUG - Text-to-speech: A formal language is a type of language that uses symbols that represent concepts not just words.
Formal languages can be used for theorem proving and for writing computer programs.
[2022-11-27 00:40:28,289] DEBUG - [#1] Subsection: A formal language is a type of language that uses symbols that represent concepts not just words.
[2022-11-27 00:41:00,020] DEBUG - [#2] Subsection: Formal languages can be used for theorem proving and for writing computer programs.
[2022-11-27 00:41:27,852] DEBUG - Text-to-speech: What is an automaton?
[2022-11-27 00:41:27,852] DEBUG - [#1] Subsection: What is an automaton?
[2022-11-27 00:41:42,812] DEBUG - Text-to-speech: An automaton is a machine that can do tasks automatically
[2022-11-27 00:41:42,812] DEBUG - [#1] Subsection: An automaton is a machine that can do tasks automatically.
[2022-11-27 00:42:06,327] DEBUG - Text-to-speech: What are the different types of formal languages?
[2022-11-27 00:42:06,327] DEBUG - [#1] Subsection: What are the different types of formal languages?
[2022-11-27 00:42:24,678] DEBUG - Text-to-speech: There are three types of formal languages: firstorder languages, secondorder languages, and higherorder languages.  Firstorder languages are simple, and they only have one type of symbol, called the denotator. Denotators are used to represent the operations that a language can perform.  Secondorder languages are a bit more complex, and they have two types of symbols: the applicator and the result. Applicators are used to denote the operations that a language can perform on inputs, and the result is the result of applying the applicator to the input.
[2022-11-27 00:42:24,678] DEBUG - [#1] Subsection: There are three types of formal languages: firstorder languages, secondorder languages, and higherorder languages.
[2022-11-27 00:43:01,419] DEBUG - [#2] Subsection: Firstorder languages are simple, and they only have one type of symbol, called the denotator.
[2022-11-27 00:43:31,211] DEBUG - [#3] Subsection: Denotators are used to represent the operations that a language can perform.
[2022-11-27 00:43:55,627] DEBUG - [#4] Subsection: Secondorder languages are a bit more complex, and they have two types of symbols: the applicator and the result.
[2022-11-27 00:44:34,083] DEBUG - [#5] Subsection: Applicators are used to denote the operations that a language can perform on inputs, and the result is the result of applying the applicator to the input.
[2022-11-27 00:45:17,376] DEBUG - Text-to-speech: What are the different types of automata?
[2022-11-27 00:45:17,376] DEBUG - [#1] Subsection: What are the different types of automata?
[2022-11-27 00:45:33,454] DEBUG - Text-to-speech: There are three types of automata: deterministic automata, random machines, and transitional automata. Deterministic automata are machines that always produce the same output given the same inputs. Random machines are machines that can produce a random output given the same inputs. Transitional automata are machines that can change between two different outputs given the same input.
[2022-11-27 00:45:33,454] DEBUG - [#1] Subsection: There are three types of automata: deterministic automata, random machines, and transitional automata.
[2022-11-27 00:46:07,015] DEBUG - [#2] Subsection: Deterministic automata are machines that always produce the same output given the same inputs.
[2022-11-27 00:46:37,333] DEBUG - [#3] Subsection: Random machines are machines that can produce a random output given the same inputs.
[2022-11-27 00:47:03,006] DEBUG - [#4] Subsection: Transitional automata are machines that can change between two different outputs given the same input.
[2022-11-27 00:47:34,485] DEBUG - Text-to-speech: What are the properties of formal languages?
[2022-11-27 00:47:34,485] DEBUG - [#1] Subsection: What are the properties of formal languages?
[2022-11-27 00:47:52,353] DEBUG - Text-to-speech: The properties of formal languages include:

* Formal languages are unambiguous. This means that every symbol in a formal language means the same thing.

* Formal languages are contextfree. This means that every symbol in a formal language can be used in any place in the language, and the meaning of the symbol is the same in every place.

* Formal languages are Turingcomplete. This means that a formal language is able to express all the possible computable operations.
[2022-11-27 00:47:52,353] DEBUG - [#1] Subsection: The properties of formal languages include:

* Formal languages are unambiguous.
[2022-11-27 00:48:20,435] DEBUG - [#2] Subsection: This means that every symbol in a formal language means the same thing.
[2022-11-27 00:48:44,992] DEBUG - [#3] Subsection: * Formal languages are contextfree.
[2022-11-27 00:49:02,171] DEBUG - [#4] Subsection: This means that every symbol in a formal language can be used in any place in the language, and the meaning of the symbol is the same in every place.
[2022-11-27 00:49:46,323] DEBUG - [#5] Subsection: * Formal languages are Turingcomplete.
[2022-11-27 00:50:03,251] DEBUG - [#6] Subsection: This means that a formal language is able to express all the possible computable operations.
[2022-11-27 00:50:31,297] DEBUG - Text-to-speech: What are the properties of automata?
[2022-11-27 00:50:31,298] DEBUG - [#1] Subsection: What are the properties of automata?
[2022-11-27 00:50:47,550] DEBUG - Text-to-speech: The properties of automata include:

* Automata are Turingcomplete.
This means that a machine that is an automaton is able to express all the possible computable operations.
* Automata can be configured in different ways so that they can perform different tasks.
* Automata can be written in a formal language, which allows for easier programming.
[2022-11-27 00:50:47,550] DEBUG - [#1] Subsection: The properties of automata include:

* Automata are Turingcomplete.
[2022-11-27 00:51:13,588] DEBUG - [#2] Subsection: This means that a machine that is an automaton is able to express all the possible computable operations.
[2022-11-27 00:51:44,440] DEBUG - [#3] Subsection: * Automata can be configured in different ways so that they can perform different tasks.
[2022-11-27 00:52:11,144] DEBUG - [#4] Subsection: * Automata can be written in a formal language, which allows for easier programming.
[2022-11-27 00:52:39,690] DEBUG - Text-to-speech: What is the relationship between formal languages and automata?
[2022-11-27 00:52:39,691] DEBUG - [#1] Subsection: What is the relationship between formal languages and automata?
[2022-11-27 00:53:02,603] DEBUG - Text-to-speech: The relationship between formal languages and automata is that formal languages are used to write automata.
Automata are used to understand and perform tasks in a formal language.
Formal language

# Alphabets
# Strings
# Languages

Automata

# Finite Automata (FA)
# Nondeterministic Finite Automata(NFA)
# Deterministic Finite Automata (DFA)
# Nondeterministic Pushdown Automata (NPDA)
# Deterministic Pushdown Automata (DPDA)
# Turing Machines
[2022-11-27 00:53:02,603] DEBUG - [#1] Subsection: The relationship between formal languages and automata is that formal languages are used to write automata.
[2022-11-27 00:53:35,219] DEBUG - [#2] Subsection: Automata are used to understand and perform tasks in a formal language.
[2022-11-27 00:54:00,667] DEBUG - [#3] Subsection: Formal language

# Alphabets
# Strings
# Languages

Automata

# Finite Automata (FA)
# Nondeterministic Finite Automata(NFA)
# Deterministic Finite Automata (DFA)
# Nondeterministic Pushdown Automata (NPDA)
# Deterministic Pushdown Automata (DPDA)
# Turing Machines.
[2022-11-27 00:55:38,506] DEBUG - Text-to-speech: What are some applications of formal languages and automata?
[2022-11-27 00:55:38,506] DEBUG - [#1] Subsection: What are some applications of formal languages and automata?
[2022-11-27 00:55:58,792] DEBUG - Text-to-speech: Some applications of formal langauges and automata include theorem proving, computer program drafting and natural langauge processing.
[2022-11-27 00:55:58,792] DEBUG - [#1] Subsection: Some applications of formal langauges and automata include theorem proving, computer program drafting and natural langauge processing.
[2022-11-27 00:56:41,006] DEBUG - Starting new HTTPS connection (1): huggingface.co:443
[2022-11-27 00:56:41,352] DEBUG - https://huggingface.co:443 "HEAD /ml6team/keyphrase-generation-t5-small-inspec/resolve/main/config.json HTTP/1.1" 200 0
[2022-11-27 00:56:41,905] DEBUG - Starting new HTTPS connection (1): huggingface.co:443
[2022-11-27 00:56:42,247] DEBUG - https://huggingface.co:443 "HEAD /ml6team/keyphrase-generation-t5-small-inspec/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
[2022-11-27 00:56:42,773] DEBUG - Getting requests for icons
[2022-11-27 00:56:42,774] DEBUG - Starting new HTTPS connection (1): www.flaticon.com:443
[2022-11-27 00:56:42,860] DEBUG - https://www.flaticon.com:443 "GET /search?word=formal%20languages&color=color&shape=outline&order_by=4 HTTP/1.1" 404 None
[2022-11-27 00:56:42,873] DEBUG - Starting new HTTPS connection (1): www.flaticon.com:443
[2022-11-27 00:56:43,090] DEBUG - https://www.flaticon.com:443 "GET /search?word=symbols&color=color&shape=outline&order_by=4 HTTP/1.1" 200 None
[2022-11-27 00:56:43,251] DEBUG - Starting new HTTPS connection (1): www.flaticon.com:443
[2022-11-27 00:56:43,344] DEBUG - https://www.flaticon.com:443 "GET /search?word=firstorder%20languages&color=color&shape=outline&order_by=4 HTTP/1.1" 404 None
[2022-11-27 00:56:43,365] DEBUG - Starting new HTTPS connection (1): www.flaticon.com:443
[2022-11-27 00:56:43,460] DEBUG - https://www.flaticon.com:443 "GET /search?word=secondorder%20languages&color=color&shape=outline&order_by=4 HTTP/1.1" 404 None
[2022-11-27 00:56:43,478] DEBUG - Starting new HTTPS connection (1): www.flaticon.com:443
[2022-11-27 00:56:43,581] DEBUG - https://www.flaticon.com:443 "GET /search?word=higherorder&color=color&shape=outline&order_by=4 HTTP/1.1" 404 None
[2022-11-27 00:56:43,597] DEBUG - ['https://cdn-icons-png.flaticon.com/256/8809/8809176.png', 'https://cdn-icons-png.flaticon.com/256/4154/4154100.png', 'https://cdn-icons-png.flaticon.com/256/4776/4776202.png', 'https://cdn-icons-png.flaticon.com/256/9008/9008809.png', 'https://cdn-icons-png.flaticon.com/256/8283/8283617.png']
[2022-11-27 00:56:43,607] DEBUG - Starting new HTTPS connection (1): cdn-icons-png.flaticon.com:443
[2022-11-27 00:56:43,843] DEBUG - https://cdn-icons-png.flaticon.com:443 "GET /256/8809/8809176.png HTTP/1.1" 200 1747
[2022-11-27 00:56:43,846] DEBUG - Starting new HTTPS connection (1): cdn-icons-png.flaticon.com:443
[2022-11-27 00:56:44,005] DEBUG - https://cdn-icons-png.flaticon.com:443 "GET /256/4154/4154100.png HTTP/1.1" 200 9804
[2022-11-27 00:56:44,008] DEBUG - Starting new HTTPS connection (1): cdn-icons-png.flaticon.com:443
[2022-11-27 00:56:44,184] DEBUG - https://cdn-icons-png.flaticon.com:443 "GET /256/4776/4776202.png HTTP/1.1" 200 9360
[2022-11-27 00:56:44,188] DEBUG - Starting new HTTPS connection (1): cdn-icons-png.flaticon.com:443
[2022-11-27 00:56:44,341] DEBUG - https://cdn-icons-png.flaticon.com:443 "GET /256/9008/9008809.png HTTP/1.1" 200 13821
[2022-11-27 00:56:44,345] DEBUG - Starting new HTTPS connection (1): cdn-icons-png.flaticon.com:443
[2022-11-27 00:56:44,485] DEBUG - https://cdn-icons-png.flaticon.com:443 "GET /256/8283/8283617.png HTTP/1.1" 200 11435
[2022-11-27 00:56:44,503] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:56:44,503] DEBUG - STREAM b'pHYs' 41 9
[2022-11-27 00:56:44,504] DEBUG - STREAM b'IDAT' 62 13353
[2022-11-27 00:56:44,517] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:56:44,517] DEBUG - STREAM b'sBIT' 41 4
[2022-11-27 00:56:44,517] DEBUG - b'sBIT' 41 4 (unknown)
[2022-11-27 00:56:44,517] DEBUG - STREAM b'pHYs' 57 9
[2022-11-27 00:56:44,517] DEBUG - STREAM b'tEXt' 78 25
[2022-11-27 00:56:44,518] DEBUG - STREAM b'IDAT' 115 8192
[2022-11-27 00:58:17,867] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:17,868] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:17,868] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:17,868] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:17,868] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:17,868] DEBUG - STREAM b'IDAT' 119 15111
[2022-11-27 00:58:17,869] DEBUG - STREAM b'tEXt' 15242 37
[2022-11-27 00:58:17,869] DEBUG - STREAM b'tEXt' 15291 37
[2022-11-27 00:58:17,870] DEBUG - STREAM b'tEXt' 15340 40
[2022-11-27 00:58:17,870] DEBUG - STREAM b'tEXt' 15392 32
[2022-11-27 00:58:18,028] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-1.wav
[2022-11-27 00:58:19,814] DEBUG - start, 0.0, end, 6.36, text,  A formal language is a type of language that uses symbols that represent concepts, not just words.
[2022-11-27 00:58:19,815] DEBUG - start, 6.36, end, 11.200000000000001, text,  Formal languages can be used for theorem proving and for writing computer programs.
[2022-11-27 00:58:19,815] DEBUG - start, 11.2, end, 40.66, text, ?
[2022-11-27 00:58:19,910] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:19,910] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:19,910] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:19,910] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:19,910] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:19,910] DEBUG - STREAM b'IDAT' 119 32768
[2022-11-27 00:58:19,913] DEBUG - STREAM b'tEXt' 34040 37
[2022-11-27 00:58:19,913] DEBUG - STREAM b'tEXt' 34089 37
[2022-11-27 00:58:19,913] DEBUG - STREAM b'tEXt' 34138 40
[2022-11-27 00:58:19,913] DEBUG - STREAM b'tEXt' 34190 104
[2022-11-27 00:58:20,011] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:20,011] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:20,011] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:20,011] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:20,011] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:20,011] DEBUG - STREAM b'IDAT' 119 29193
[2022-11-27 00:58:20,013] DEBUG - STREAM b'tEXt' 29324 37
[2022-11-27 00:58:20,013] DEBUG - STREAM b'tEXt' 29373 37
[2022-11-27 00:58:20,013] DEBUG - STREAM b'tEXt' 29422 40
[2022-11-27 00:58:20,013] DEBUG - STREAM b'tEXt' 29474 89
[2022-11-27 00:58:20,182] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:20,182] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:20,182] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:20,182] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:20,182] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:20,182] DEBUG - STREAM b'IDAT' 119 539
[2022-11-27 00:58:20,182] DEBUG - STREAM b'tEXt' 670 37
[2022-11-27 00:58:20,182] DEBUG - STREAM b'tEXt' 719 37
[2022-11-27 00:58:20,182] DEBUG - STREAM b'tEXt' 768 40
[2022-11-27 00:58:20,182] DEBUG - STREAM b'tEXt' 820 7
[2022-11-27 00:58:20,803] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:20,804] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:20,804] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:20,804] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:20,804] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:20,804] DEBUG - STREAM b'IDAT' 119 12676
[2022-11-27 00:58:20,804] DEBUG - STREAM b'tEXt' 12807 37
[2022-11-27 00:58:20,804] DEBUG - STREAM b'tEXt' 12856 37
[2022-11-27 00:58:20,804] DEBUG - STREAM b'tEXt' 12905 40
[2022-11-27 00:58:20,805] DEBUG - STREAM b'tEXt' 12957 27
[2022-11-27 00:58:20,806] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-3.wav
[2022-11-27 00:58:21,121] DEBUG - start, 0.0, end, 3.6, text,  An automaton is a machine that can do tasks automatically.
[2022-11-27 00:58:21,205] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:21,205] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:21,205] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:21,205] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:21,205] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:21,205] DEBUG - STREAM b'IDAT' 119 17908
[2022-11-27 00:58:21,206] DEBUG - STREAM b'tEXt' 18039 37
[2022-11-27 00:58:21,206] DEBUG - STREAM b'tEXt' 18088 37
[2022-11-27 00:58:21,206] DEBUG - STREAM b'tEXt' 18137 40
[2022-11-27 00:58:21,206] DEBUG - STREAM b'tEXt' 18189 64
[2022-11-27 00:58:22,160] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:22,160] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:22,160] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:22,160] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:22,160] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:22,160] DEBUG - STREAM b'IDAT' 119 23954
[2022-11-27 00:58:22,161] DEBUG - STREAM b'tEXt' 24085 37
[2022-11-27 00:58:22,161] DEBUG - STREAM b'tEXt' 24134 37
[2022-11-27 00:58:22,161] DEBUG - STREAM b'tEXt' 24183 40
[2022-11-27 00:58:22,161] DEBUG - STREAM b'tEXt' 24235 55
[2022-11-27 00:58:22,163] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-5.wav
[2022-11-27 00:58:24,470] DEBUG - start, 0.0, end, 2.4, text,  There are three types of formal languages.
[2022-11-27 00:58:24,470] DEBUG - start, 2.4, end, 5.2, text,  First order languages, second order languages,
[2022-11-27 00:58:24,470] DEBUG - start, 5.2, end, 7.08, text,  and higher order languages.
[2022-11-27 00:58:24,470] DEBUG - start, 7.08, end, 9.040000000000001, text,  First order languages are simple,
[2022-11-27 00:58:24,470] DEBUG - start, 9.040000000000001, end, 12.44, text,  and they only have one type of symbol called the denotator.
[2022-11-27 00:58:24,470] DEBUG - start, 12.44, end, 15.0, text,  Denotators are used to represent the operations
[2022-11-27 00:58:24,470] DEBUG - start, 15.0, end, 16.76, text,  that a language can perform.
[2022-11-27 00:58:24,470] DEBUG - start, 16.76, end, 19.44, text,  Second order languages are a bit more complex,
[2022-11-27 00:58:24,470] DEBUG - start, 19.44, end, 21.32, text,  and they have two types of symbols,
[2022-11-27 00:58:24,470] DEBUG - start, 21.32, end, 23.2, text,  the applicator and the result.
[2022-11-27 00:58:24,470] DEBUG - start, 23.2, end, 25.68, text,  Applicators are used to denote the operations
[2022-11-27 00:58:24,470] DEBUG - start, 25.68, end, 28.240000000000002, text,  that a language can perform on inputs,
[2022-11-27 00:58:24,471] DEBUG - start, 28.24, end, 30.759999999999998, text,  and the result is the result of applying the applicator
[2022-11-27 00:58:24,471] DEBUG - start, 30.759999999999998, end, 31.959999999999997, text,  to the input.
[2022-11-27 00:58:24,647] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:24,647] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:24,647] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:24,647] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:24,647] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:24,647] DEBUG - STREAM b'IDAT' 119 14100
[2022-11-27 00:58:24,648] DEBUG - STREAM b'tEXt' 14231 37
[2022-11-27 00:58:24,648] DEBUG - STREAM b'tEXt' 14280 37
[2022-11-27 00:58:24,648] DEBUG - STREAM b'tEXt' 14329 40
[2022-11-27 00:58:24,648] DEBUG - STREAM b'tEXt' 14381 48
[2022-11-27 00:58:24,728] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:24,728] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:24,728] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:24,728] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:24,728] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:24,729] DEBUG - STREAM b'IDAT' 119 16119
[2022-11-27 00:58:24,729] DEBUG - STREAM b'tEXt' 16250 37
[2022-11-27 00:58:24,729] DEBUG - STREAM b'tEXt' 16299 37
[2022-11-27 00:58:24,729] DEBUG - STREAM b'tEXt' 16348 40
[2022-11-27 00:58:24,729] DEBUG - STREAM b'tEXt' 16400 52
[2022-11-27 00:58:24,803] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:24,803] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:24,803] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:24,803] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:24,803] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:24,803] DEBUG - STREAM b'IDAT' 119 9907
[2022-11-27 00:58:24,804] DEBUG - STREAM b'tEXt' 10038 37
[2022-11-27 00:58:24,804] DEBUG - STREAM b'tEXt' 10087 37
[2022-11-27 00:58:24,804] DEBUG - STREAM b'tEXt' 10136 40
[2022-11-27 00:58:24,804] DEBUG - STREAM b'tEXt' 10188 33
[2022-11-27 00:58:24,993] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:24,993] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:24,993] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:24,993] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:24,993] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:24,993] DEBUG - STREAM b'IDAT' 119 11345
[2022-11-27 00:58:24,993] DEBUG - STREAM b'tEXt' 11476 37
[2022-11-27 00:58:24,993] DEBUG - STREAM b'tEXt' 11525 37
[2022-11-27 00:58:24,994] DEBUG - STREAM b'tEXt' 11574 40
[2022-11-27 00:58:24,994] DEBUG - STREAM b'tEXt' 11626 39
[2022-11-27 00:58:25,090] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,090] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,090] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,090] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,090] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,090] DEBUG - STREAM b'IDAT' 119 20699
[2022-11-27 00:58:25,091] DEBUG - STREAM b'tEXt' 20830 37
[2022-11-27 00:58:25,091] DEBUG - STREAM b'tEXt' 20879 37
[2022-11-27 00:58:25,092] DEBUG - STREAM b'tEXt' 20928 40
[2022-11-27 00:58:25,092] DEBUG - STREAM b'tEXt' 20980 65
[2022-11-27 00:58:25,180] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,180] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,180] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,180] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,180] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,180] DEBUG - STREAM b'IDAT' 119 15888
[2022-11-27 00:58:25,181] DEBUG - STREAM b'tEXt' 16019 37
[2022-11-27 00:58:25,181] DEBUG - STREAM b'tEXt' 16068 37
[2022-11-27 00:58:25,181] DEBUG - STREAM b'tEXt' 16117 40
[2022-11-27 00:58:25,181] DEBUG - STREAM b'tEXt' 16169 53
[2022-11-27 00:58:25,366] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,366] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,366] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,366] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,366] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,366] DEBUG - STREAM b'IDAT' 119 9695
[2022-11-27 00:58:25,367] DEBUG - STREAM b'tEXt' 9826 37
[2022-11-27 00:58:25,367] DEBUG - STREAM b'tEXt' 9875 37
[2022-11-27 00:58:25,367] DEBUG - STREAM b'tEXt' 9924 40
[2022-11-27 00:58:25,367] DEBUG - STREAM b'tEXt' 9976 34
[2022-11-27 00:58:25,442] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,443] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,443] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,443] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,443] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,443] DEBUG - STREAM b'IDAT' 119 16937
[2022-11-27 00:58:25,444] DEBUG - STREAM b'tEXt' 17068 37
[2022-11-27 00:58:25,444] DEBUG - STREAM b'tEXt' 17117 37
[2022-11-27 00:58:25,444] DEBUG - STREAM b'tEXt' 17166 40
[2022-11-27 00:58:25,444] DEBUG - STREAM b'tEXt' 17218 52
[2022-11-27 00:58:25,526] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,526] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,526] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,526] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,526] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,526] DEBUG - STREAM b'IDAT' 119 13187
[2022-11-27 00:58:25,526] DEBUG - STREAM b'tEXt' 13318 37
[2022-11-27 00:58:25,527] DEBUG - STREAM b'tEXt' 13367 37
[2022-11-27 00:58:25,527] DEBUG - STREAM b'tEXt' 13416 40
[2022-11-27 00:58:25,527] DEBUG - STREAM b'tEXt' 13468 41
[2022-11-27 00:58:25,603] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,603] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,603] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,603] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,603] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,603] DEBUG - STREAM b'IDAT' 119 9277
[2022-11-27 00:58:25,604] DEBUG - STREAM b'tEXt' 9408 37
[2022-11-27 00:58:25,604] DEBUG - STREAM b'tEXt' 9457 37
[2022-11-27 00:58:25,604] DEBUG - STREAM b'tEXt' 9506 40
[2022-11-27 00:58:25,604] DEBUG - STREAM b'tEXt' 9558 36
[2022-11-27 00:58:25,681] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,681] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,682] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,682] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,682] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,682] DEBUG - STREAM b'IDAT' 119 15404
[2022-11-27 00:58:25,682] DEBUG - STREAM b'tEXt' 15535 37
[2022-11-27 00:58:25,682] DEBUG - STREAM b'tEXt' 15584 37
[2022-11-27 00:58:25,683] DEBUG - STREAM b'tEXt' 15633 40
[2022-11-27 00:58:25,683] DEBUG - STREAM b'tEXt' 15685 51
[2022-11-27 00:58:25,868] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,868] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,868] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,868] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,868] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,868] DEBUG - STREAM b'IDAT' 119 12224
[2022-11-27 00:58:25,869] DEBUG - STREAM b'tEXt' 12355 37
[2022-11-27 00:58:25,869] DEBUG - STREAM b'tEXt' 12404 37
[2022-11-27 00:58:25,869] DEBUG - STREAM b'tEXt' 12453 40
[2022-11-27 00:58:25,869] DEBUG - STREAM b'tEXt' 12505 44
[2022-11-27 00:58:25,950] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:25,950] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:25,951] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:25,951] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:25,951] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:25,951] DEBUG - STREAM b'IDAT' 119 16877
[2022-11-27 00:58:25,952] DEBUG - STREAM b'tEXt' 17008 37
[2022-11-27 00:58:25,952] DEBUG - STREAM b'tEXt' 17057 37
[2022-11-27 00:58:25,952] DEBUG - STREAM b'tEXt' 17106 40
[2022-11-27 00:58:25,952] DEBUG - STREAM b'tEXt' 17158 61
[2022-11-27 00:58:26,019] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:26,020] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:26,020] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:26,020] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:26,020] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:26,020] DEBUG - STREAM b'IDAT' 119 3386
[2022-11-27 00:58:26,020] DEBUG - STREAM b'tEXt' 3517 37
[2022-11-27 00:58:26,020] DEBUG - STREAM b'tEXt' 3566 37
[2022-11-27 00:58:26,020] DEBUG - STREAM b'tEXt' 3615 40
[2022-11-27 00:58:26,020] DEBUG - STREAM b'tEXt' 3667 19
[2022-11-27 00:58:26,870] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:26,870] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:26,870] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:26,870] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:26,870] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:26,870] DEBUG - STREAM b'IDAT' 119 18755
[2022-11-27 00:58:26,872] DEBUG - STREAM b'tEXt' 18886 37
[2022-11-27 00:58:26,872] DEBUG - STREAM b'tEXt' 18935 37
[2022-11-27 00:58:26,872] DEBUG - STREAM b'tEXt' 18984 40
[2022-11-27 00:58:26,872] DEBUG - STREAM b'tEXt' 19036 47
[2022-11-27 00:58:26,874] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-7.wav
[2022-11-27 00:58:28,763] DEBUG - start, 0.0, end, 6.4, text,  There are three types of automata, deterministic automata, random machines, and transitional automata.
[2022-11-27 00:58:28,763] DEBUG - start, 6.4, end, 12.4, text,  Deterministic automata are machines that always produce the same output given the same inputs.
[2022-11-27 00:58:28,763] DEBUG - start, 12.4, end, 17.5, text,  Random machines are machines that can produce a random output given the same inputs.
[2022-11-27 00:58:28,763] DEBUG - start, 17.5, end, 31.0, text,  Transitional automata are machines that can change between two different outputs given the same input.
[2022-11-27 00:58:28,867] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:28,867] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:28,867] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:28,867] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:28,867] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:28,868] DEBUG - STREAM b'IDAT' 119 32768
[2022-11-27 00:58:28,870] DEBUG - STREAM b'tEXt' 34400 37
[2022-11-27 00:58:28,870] DEBUG - STREAM b'tEXt' 34449 37
[2022-11-27 00:58:28,870] DEBUG - STREAM b'tEXt' 34498 40
[2022-11-27 00:58:28,870] DEBUG - STREAM b'tEXt' 34550 108
[2022-11-27 00:58:29,079] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:29,080] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:29,080] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:29,080] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:29,080] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:29,080] DEBUG - STREAM b'IDAT' 119 32002
[2022-11-27 00:58:29,082] DEBUG - STREAM b'tEXt' 32133 37
[2022-11-27 00:58:29,082] DEBUG - STREAM b'tEXt' 32182 37
[2022-11-27 00:58:29,082] DEBUG - STREAM b'tEXt' 32231 40
[2022-11-27 00:58:29,083] DEBUG - STREAM b'tEXt' 32283 100
[2022-11-27 00:58:29,289] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:29,289] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:29,290] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:29,290] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:29,290] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:29,290] DEBUG - STREAM b'IDAT' 119 28645
[2022-11-27 00:58:29,291] DEBUG - STREAM b'tEXt' 28776 37
[2022-11-27 00:58:29,291] DEBUG - STREAM b'tEXt' 28825 37
[2022-11-27 00:58:29,291] DEBUG - STREAM b'tEXt' 28874 40
[2022-11-27 00:58:29,291] DEBUG - STREAM b'tEXt' 28926 90
[2022-11-27 00:58:29,406] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:29,406] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:29,406] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:29,406] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:29,406] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:29,406] DEBUG - STREAM b'IDAT' 119 32768
[2022-11-27 00:58:29,408] DEBUG - STREAM b'tEXt' 34082 37
[2022-11-27 00:58:29,408] DEBUG - STREAM b'tEXt' 34131 37
[2022-11-27 00:58:29,408] DEBUG - STREAM b'tEXt' 34180 40
[2022-11-27 00:58:29,408] DEBUG - STREAM b'tEXt' 34232 108
[2022-11-27 00:58:30,197] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:30,197] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:30,197] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:30,198] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:30,198] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:30,198] DEBUG - STREAM b'IDAT' 119 23605
[2022-11-27 00:58:30,200] DEBUG - STREAM b'tEXt' 23736 37
[2022-11-27 00:58:30,200] DEBUG - STREAM b'tEXt' 23785 37
[2022-11-27 00:58:30,200] DEBUG - STREAM b'tEXt' 23834 40
[2022-11-27 00:58:30,200] DEBUG - STREAM b'tEXt' 23886 50
[2022-11-27 00:58:30,203] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-9.wav
[2022-11-27 00:58:32,019] DEBUG - start, 0.0, end, 5.3, text,  The properties of formal languages include, formal languages are unambiguous.
[2022-11-27 00:58:32,019] DEBUG - start, 5.3, end, 9.3, text,  This means that every symbol in a formal language means the same thing.
[2022-11-27 00:58:32,019] DEBUG - start, 9.3, end, 13.3, text,  Formal languages are context-free.
[2022-11-27 00:58:32,019] DEBUG - start, 13.3, end, 18.8, text,  This means that every symbol in a formal language can be used in any place in the language.
[2022-11-27 00:58:32,019] DEBUG - start, 18.8, end, 23.1, text,  And the meaning of the symbol is the same in every place.
[2022-11-27 00:58:32,019] DEBUG - start, 23.1, end, 25.400000000000002, text,  Formal languages are Turing complete.
[2022-11-27 00:58:32,019] DEBUG - start, 25.4, end, 30.7, text,  This means that a formal language is able to express all the possible computable operations.
[2022-11-27 00:58:32,107] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:32,107] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:32,107] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:32,107] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:32,107] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:32,107] DEBUG - STREAM b'IDAT' 119 26786
[2022-11-27 00:58:32,108] DEBUG - STREAM b'tEXt' 26917 37
[2022-11-27 00:58:32,108] DEBUG - STREAM b'tEXt' 26966 37
[2022-11-27 00:58:32,108] DEBUG - STREAM b'tEXt' 27015 40
[2022-11-27 00:58:32,108] DEBUG - STREAM b'tEXt' 27067 83
[2022-11-27 00:58:32,205] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:32,206] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:32,206] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:32,206] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:32,206] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:32,206] DEBUG - STREAM b'IDAT' 119 24800
[2022-11-27 00:58:32,207] DEBUG - STREAM b'tEXt' 24931 37
[2022-11-27 00:58:32,207] DEBUG - STREAM b'tEXt' 24980 37
[2022-11-27 00:58:32,207] DEBUG - STREAM b'tEXt' 25029 40
[2022-11-27 00:58:32,207] DEBUG - STREAM b'tEXt' 25081 77
[2022-11-27 00:58:32,289] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:32,289] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:32,289] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:32,289] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:32,289] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:32,289] DEBUG - STREAM b'IDAT' 119 11738
[2022-11-27 00:58:32,289] DEBUG - STREAM b'tEXt' 11869 37
[2022-11-27 00:58:32,289] DEBUG - STREAM b'tEXt' 11918 37
[2022-11-27 00:58:32,289] DEBUG - STREAM b'tEXt' 11967 40
[2022-11-27 00:58:32,289] DEBUG - STREAM b'tEXt' 12019 40
[2022-11-27 00:58:32,389] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:32,389] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:32,389] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:32,389] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:32,389] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:32,389] DEBUG - STREAM b'IDAT' 119 30615
[2022-11-27 00:58:32,391] DEBUG - STREAM b'tEXt' 30746 37
[2022-11-27 00:58:32,391] DEBUG - STREAM b'tEXt' 30795 37
[2022-11-27 00:58:32,391] DEBUG - STREAM b'tEXt' 30844 40
[2022-11-27 00:58:32,391] DEBUG - STREAM b'tEXt' 30896 97
[2022-11-27 00:58:32,483] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:32,483] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:32,483] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:32,483] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:32,483] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:32,484] DEBUG - STREAM b'IDAT' 119 19453
[2022-11-27 00:58:32,484] DEBUG - STREAM b'tEXt' 19584 37
[2022-11-27 00:58:32,484] DEBUG - STREAM b'tEXt' 19633 37
[2022-11-27 00:58:32,484] DEBUG - STREAM b'tEXt' 19682 40
[2022-11-27 00:58:32,484] DEBUG - STREAM b'tEXt' 19734 63
[2022-11-27 00:58:32,565] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:32,565] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:32,565] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:32,565] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:32,565] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:32,565] DEBUG - STREAM b'IDAT' 119 12685
[2022-11-27 00:58:32,566] DEBUG - STREAM b'tEXt' 12816 37
[2022-11-27 00:58:32,566] DEBUG - STREAM b'tEXt' 12865 37
[2022-11-27 00:58:32,566] DEBUG - STREAM b'tEXt' 12914 40
[2022-11-27 00:58:32,566] DEBUG - STREAM b'tEXt' 12966 43
[2022-11-27 00:58:32,784] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:32,784] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:32,784] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:32,784] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:32,784] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:32,784] DEBUG - STREAM b'IDAT' 119 30216
[2022-11-27 00:58:32,785] DEBUG - STREAM b'tEXt' 30347 37
[2022-11-27 00:58:32,785] DEBUG - STREAM b'tEXt' 30396 37
[2022-11-27 00:58:32,785] DEBUG - STREAM b'tEXt' 30445 40
[2022-11-27 00:58:32,785] DEBUG - STREAM b'tEXt' 30497 98
[2022-11-27 00:58:33,542] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:33,542] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:33,543] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:33,543] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:33,543] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:33,543] DEBUG - STREAM b'IDAT' 119 18786
[2022-11-27 00:58:33,544] DEBUG - STREAM b'tEXt' 18917 37
[2022-11-27 00:58:33,544] DEBUG - STREAM b'tEXt' 18966 37
[2022-11-27 00:58:33,544] DEBUG - STREAM b'tEXt' 19015 40
[2022-11-27 00:58:33,544] DEBUG - STREAM b'tEXt' 19067 42
[2022-11-27 00:58:33,547] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-11.wav
[2022-11-27 00:58:35,188] DEBUG - start, 0.0, end, 2.0, text,  The properties of Automata include...
[2022-11-27 00:58:35,188] DEBUG - start, 3.2, end, 5.2, text,  Automata are Turing complete.
[2022-11-27 00:58:35,188] DEBUG - start, 5.6000000000000005, end, 7.9, text,  This means that a machine that is in Automata
[2022-11-27 00:58:35,188] DEBUG - start, 7.9, end, 11.4, text,  is able to express all the possible computable operations.
[2022-11-27 00:58:35,188] DEBUG - start, 11.700000000000001, end, 14.1, text,  The Automata can be configured in different ways
[2022-11-27 00:58:35,188] DEBUG - start, 14.1, end, 16.1, text,  so that they can perform different tasks.
[2022-11-27 00:58:35,188] DEBUG - start, 16.5, end, 20.3, text,  Uh... Automata can be written in a formal language
[2022-11-27 00:58:35,189] DEBUG - start, 20.3, end, 27.3, text,  which allows for easier programming.
[2022-11-27 00:58:35,263] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,263] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,263] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,263] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,263] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,263] DEBUG - STREAM b'IDAT' 119 11570
[2022-11-27 00:58:35,264] DEBUG - STREAM b'tEXt' 11701 37
[2022-11-27 00:58:35,264] DEBUG - STREAM b'tEXt' 11750 37
[2022-11-27 00:58:35,264] DEBUG - STREAM b'tEXt' 11799 40
[2022-11-27 00:58:35,264] DEBUG - STREAM b'tEXt' 11851 43
[2022-11-27 00:58:35,338] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,339] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,339] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,339] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,339] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,339] DEBUG - STREAM b'IDAT' 119 10018
[2022-11-27 00:58:35,340] DEBUG - STREAM b'tEXt' 10149 37
[2022-11-27 00:58:35,340] DEBUG - STREAM b'tEXt' 10198 37
[2022-11-27 00:58:35,340] DEBUG - STREAM b'tEXt' 10247 40
[2022-11-27 00:58:35,340] DEBUG - STREAM b'tEXt' 10299 35
[2022-11-27 00:58:35,417] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,417] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,417] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,417] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,417] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,417] DEBUG - STREAM b'IDAT' 119 12898
[2022-11-27 00:58:35,418] DEBUG - STREAM b'tEXt' 13029 37
[2022-11-27 00:58:35,418] DEBUG - STREAM b'tEXt' 13078 37
[2022-11-27 00:58:35,418] DEBUG - STREAM b'tEXt' 13127 40
[2022-11-27 00:58:35,418] DEBUG - STREAM b'tEXt' 13179 51
[2022-11-27 00:58:35,510] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,510] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,510] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,510] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,510] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,510] DEBUG - STREAM b'IDAT' 119 19684
[2022-11-27 00:58:35,512] DEBUG - STREAM b'tEXt' 19815 37
[2022-11-27 00:58:35,513] DEBUG - STREAM b'tEXt' 19864 37
[2022-11-27 00:58:35,513] DEBUG - STREAM b'tEXt' 19913 40
[2022-11-27 00:58:35,513] DEBUG - STREAM b'tEXt' 19965 64
[2022-11-27 00:58:35,598] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,598] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,598] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,598] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,598] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,598] DEBUG - STREAM b'IDAT' 119 16266
[2022-11-27 00:58:35,599] DEBUG - STREAM b'tEXt' 16397 37
[2022-11-27 00:58:35,599] DEBUG - STREAM b'tEXt' 16446 37
[2022-11-27 00:58:35,599] DEBUG - STREAM b'tEXt' 16495 40
[2022-11-27 00:58:35,599] DEBUG - STREAM b'tEXt' 16547 54
[2022-11-27 00:58:35,678] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,678] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,678] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,678] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,678] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,678] DEBUG - STREAM b'IDAT' 119 12815
[2022-11-27 00:58:35,679] DEBUG - STREAM b'tEXt' 12946 37
[2022-11-27 00:58:35,679] DEBUG - STREAM b'tEXt' 12995 37
[2022-11-27 00:58:35,679] DEBUG - STREAM b'tEXt' 13044 40
[2022-11-27 00:58:35,679] DEBUG - STREAM b'tEXt' 13096 47
[2022-11-27 00:58:35,758] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,758] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,758] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,758] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,758] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,758] DEBUG - STREAM b'IDAT' 119 15407
[2022-11-27 00:58:35,759] DEBUG - STREAM b'tEXt' 15538 37
[2022-11-27 00:58:35,759] DEBUG - STREAM b'tEXt' 15587 37
[2022-11-27 00:58:35,759] DEBUG - STREAM b'tEXt' 15636 40
[2022-11-27 00:58:35,759] DEBUG - STREAM b'tEXt' 15688 56
[2022-11-27 00:58:35,839] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:35,839] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:35,839] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:35,839] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:35,839] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:35,839] DEBUG - STREAM b'IDAT' 119 12930
[2022-11-27 00:58:35,840] DEBUG - STREAM b'tEXt' 13061 37
[2022-11-27 00:58:35,840] DEBUG - STREAM b'tEXt' 13110 37
[2022-11-27 00:58:35,840] DEBUG - STREAM b'tEXt' 13159 40
[2022-11-27 00:58:35,840] DEBUG - STREAM b'tEXt' 13211 42
[2022-11-27 00:58:36,734] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:36,734] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:36,734] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:36,734] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:36,734] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:36,734] DEBUG - STREAM b'IDAT' 119 32768
[2022-11-27 00:58:36,736] DEBUG - STREAM b'tEXt' 34250 37
[2022-11-27 00:58:36,736] DEBUG - STREAM b'tEXt' 34299 37
[2022-11-27 00:58:36,736] DEBUG - STREAM b'tEXt' 34348 40
[2022-11-27 00:58:36,736] DEBUG - STREAM b'tEXt' 34400 69
[2022-11-27 00:58:36,739] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-13.wav
[2022-11-27 00:58:39,177] DEBUG - start, 0.0, end, 6.5600000000000005, text,  The relationship between formal languages and automata is that formal languages are used to write automata.
[2022-11-27 00:58:39,177] DEBUG - start, 6.5600000000000005, end, 11.08, text,  Automata are used to understand and perform tasks in a formal language.
[2022-11-27 00:58:39,177] DEBUG - start, 11.08, end, 16.46, text,  Formal language alphabets, strings languages automata, finite automata,
[2022-11-27 00:58:39,177] DEBUG - start, 16.46, end, 22.16, text,  faya non-deterministic finite automata, non-deterministic finite automata,
[2022-11-27 00:58:39,177] DEBUG - start, 22.16, end, 24.6, text,  deterministic finite automata,
[2022-11-27 00:58:39,178] DEBUG - start, 24.6, end, 27.840000000000003, text,  defay deterministic pushdown automata,
[2022-11-27 00:58:39,178] DEBUG - start, 27.840000000000003, end, 31.400000000000002, text,  neve deterministic pushdown automata, and DDA.
[2022-11-27 00:58:39,178] DEBUG - start, 31.4, end, 60.78, text,  SHI.
[2022-11-27 00:58:39,289] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:39,289] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:39,289] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:39,289] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:39,289] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:39,290] DEBUG - STREAM b'IDAT' 119 32768
[2022-11-27 00:58:39,292] DEBUG - STREAM b'tEXt' 38074 37
[2022-11-27 00:58:39,292] DEBUG - STREAM b'tEXt' 38123 37
[2022-11-27 00:58:39,292] DEBUG - STREAM b'tEXt' 38172 40
[2022-11-27 00:58:39,292] DEBUG - STREAM b'tEXt' 38224 113
[2022-11-27 00:58:39,389] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:39,391] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:39,391] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:39,391] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:39,391] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:39,391] DEBUG - STREAM b'IDAT' 119 25004
[2022-11-27 00:58:39,392] DEBUG - STREAM b'tEXt' 25135 37
[2022-11-27 00:58:39,392] DEBUG - STREAM b'tEXt' 25184 37
[2022-11-27 00:58:39,392] DEBUG - STREAM b'tEXt' 25233 40
[2022-11-27 00:58:39,392] DEBUG - STREAM b'tEXt' 25285 77
[2022-11-27 00:58:39,597] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:39,597] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:39,597] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:39,598] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:39,598] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:39,598] DEBUG - STREAM b'IDAT' 119 24403
[2022-11-27 00:58:39,599] DEBUG - STREAM b'tEXt' 24534 37
[2022-11-27 00:58:39,599] DEBUG - STREAM b'tEXt' 24583 37
[2022-11-27 00:58:39,599] DEBUG - STREAM b'tEXt' 24632 40
[2022-11-27 00:58:39,600] DEBUG - STREAM b'tEXt' 24684 77
[2022-11-27 00:58:39,700] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:39,700] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:39,700] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:39,700] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:39,700] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:39,700] DEBUG - STREAM b'IDAT' 119 22610
[2022-11-27 00:58:39,702] DEBUG - STREAM b'tEXt' 22741 37
[2022-11-27 00:58:39,702] DEBUG - STREAM b'tEXt' 22790 37
[2022-11-27 00:58:39,702] DEBUG - STREAM b'tEXt' 22839 40
[2022-11-27 00:58:39,702] DEBUG - STREAM b'tEXt' 22891 80
[2022-11-27 00:58:39,897] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:39,898] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:39,898] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:39,898] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:39,898] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:39,898] DEBUG - STREAM b'IDAT' 119 8865
[2022-11-27 00:58:39,899] DEBUG - STREAM b'tEXt' 8996 37
[2022-11-27 00:58:39,899] DEBUG - STREAM b'tEXt' 9045 37
[2022-11-27 00:58:39,899] DEBUG - STREAM b'tEXt' 9094 40
[2022-11-27 00:58:39,899] DEBUG - STREAM b'tEXt' 9146 36
[2022-11-27 00:58:40,089] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:40,090] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:40,090] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:40,090] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:40,090] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:40,090] DEBUG - STREAM b'IDAT' 119 14198
[2022-11-27 00:58:40,090] DEBUG - STREAM b'tEXt' 14329 37
[2022-11-27 00:58:40,090] DEBUG - STREAM b'tEXt' 14378 37
[2022-11-27 00:58:40,090] DEBUG - STREAM b'tEXt' 14427 40
[2022-11-27 00:58:40,090] DEBUG - STREAM b'tEXt' 14479 44
[2022-11-27 00:58:40,173] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:40,173] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:40,174] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:40,174] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:40,174] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:40,174] DEBUG - STREAM b'IDAT' 119 16491
[2022-11-27 00:58:40,175] DEBUG - STREAM b'tEXt' 16622 37
[2022-11-27 00:58:40,175] DEBUG - STREAM b'tEXt' 16671 37
[2022-11-27 00:58:40,175] DEBUG - STREAM b'tEXt' 16720 40
[2022-11-27 00:58:40,175] DEBUG - STREAM b'tEXt' 16772 52
[2022-11-27 00:58:40,240] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:40,240] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:40,242] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:40,242] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:40,242] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:40,242] DEBUG - STREAM b'IDAT' 119 1300
[2022-11-27 00:58:40,242] DEBUG - STREAM b'tEXt' 1431 37
[2022-11-27 00:58:40,242] DEBUG - STREAM b'tEXt' 1480 37
[2022-11-27 00:58:40,242] DEBUG - STREAM b'tEXt' 1529 40
[2022-11-27 00:58:40,242] DEBUG - STREAM b'tEXt' 1581 10
[2022-11-27 00:58:41,100] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:41,100] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:41,100] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:41,100] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:41,100] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:41,100] DEBUG - STREAM b'IDAT' 119 32768
[2022-11-27 00:58:41,102] DEBUG - STREAM b'tEXt' 36748 37
[2022-11-27 00:58:41,102] DEBUG - STREAM b'tEXt' 36797 37
[2022-11-27 00:58:41,103] DEBUG - STREAM b'tEXt' 36846 40
[2022-11-27 00:58:41,103] DEBUG - STREAM b'tEXt' 36898 66
[2022-11-27 00:58:41,106] DEBUG - transcribing audio file in path .\scripts\VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh\audio\audio-15.wav
[2022-11-27 00:58:41,965] DEBUG - start, 0.0, end, 5.8, text,  Some applications of formal laying gojays and automata include deer improving, computer
[2022-11-27 00:58:41,965] DEBUG - start, 5.8, end, 35.76, text,  program drafting and natural long gojh processing.
[2022-11-27 00:58:42,056] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:42,056] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:42,056] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:42,056] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:42,056] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:42,056] DEBUG - STREAM b'IDAT' 119 30530
[2022-11-27 00:58:42,057] DEBUG - STREAM b'tEXt' 30661 37
[2022-11-27 00:58:42,057] DEBUG - STREAM b'tEXt' 30710 37
[2022-11-27 00:58:42,057] DEBUG - STREAM b'tEXt' 30759 40
[2022-11-27 00:58:42,058] DEBUG - STREAM b'tEXt' 30811 93
[2022-11-27 00:58:42,138] DEBUG - STREAM b'IHDR' 16 13
[2022-11-27 00:58:42,138] DEBUG - STREAM b'gAMA' 41 4
[2022-11-27 00:58:42,138] DEBUG - STREAM b'cHRM' 57 32
[2022-11-27 00:58:42,138] DEBUG - STREAM b'bKGD' 101 6
[2022-11-27 00:58:42,138] DEBUG - b'bKGD' 101 6 (unknown)
[2022-11-27 00:58:42,139] DEBUG - STREAM b'IDAT' 119 17302
[2022-11-27 00:58:42,139] DEBUG - STREAM b'tEXt' 17433 37
[2022-11-27 00:58:42,139] DEBUG - STREAM b'tEXt' 17482 37
[2022-11-27 00:58:42,139] DEBUG - STREAM b'tEXt' 17531 40
[2022-11-27 00:58:42,139] DEBUG - STREAM b'tEXt' 17583 56
[2022-11-27 01:07:57,884] INFO - Video finished id: VGhlIE1hZ2ljIG9mIEZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRh
[2022-11-27 01:07:57,884] INFO - Finished video creation (1/1)
